<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Typora+PicGo-Core+gitee建立图床</title>
    <url>/2021/09/03/Typora+PicGo-Core%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>Typora+PicGo-Core+gitee建立图床(强烈建议不要使用github建立,因为就算图像上传成功,typora也会因为网络问题读取不到图片,很麻烦)</p>
<span id="more"></span>

<h1 id="typora设置"><a href="#typora设置" class="headerlink" title="typora设置"></a>typora设置</h1><p>typora点击文件,选择偏好设置,点击图像.</p>
<p>如图所示:</p>
<ol>
<li>选择picgo-core</li>
<li>点击下载更新,按照提示下载即可</li>
<li>点击,然后选择上传图片</li>
<li>勾选如图所示规则</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903103056849.png" alt="image-20210903103056849"></p>
<h1 id="PicGo-Core插件下载和配置文件"><a href="#PicGo-Core插件下载和配置文件" class="headerlink" title="PicGo-Core插件下载和配置文件"></a>PicGo-Core插件下载和配置文件</h1><h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><p>为后续顺利安装插件，先安装好node.js环境；到node.js官网:<a href="https://nodejs.org/en/%E4%B8%8B%E8%BD%BD%E6%88%96%E8%80%85%E7%82%B9%E5%87%BBhttps://nodejs.org/dist/%E8%BF%9B%E5%8E%BB%E5%8F%AF%E9%80%89%E6%8B%A9%E5%90%84%E7%89%88%E6%9C%AC%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%BA%94%E7%9A%84%E4%B8%8B%E8%BD%BD">https://nodejs.org/en/下载或者点击https://nodejs.org/dist/进去可选择各版本进行相应的下载</a></p>
<p>检查PATH环境变量是否配置了Node.js，在cmd窗口输入命令“path”查下是否有node.js路径；</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903103621840.png" alt="image-20210903103621840"></p>
<p>我们可以看到PATH环境变量已经包含node.js,在cmd窗口继续输入命令“node –version”会输出版本信息，为以下安装插件的node.js环境就准备完毕了！</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903103707330.png" alt="image-20210903103707330"></p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>分别安装gitee-uploader，github-plus插件来支持gitee，github图床上传.</p>
<p>首先确认picdo-core安装的位置在那儿,获取路径方式如下.</p>
<ol>
<li>首先依次点击typora,文件,偏好设置,图像,到达如图所示位置</li>
<li>点击验证图片上传选项</li>
<li>下面第二个图红线圈出的位置即为picdo-core安装位置</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903103852867.png" alt="image-20210903103852867"></p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903104101668.png" alt="image-20210903104101668"></p>
<p>然后在picgo安装的路径下运行cmd窗口安装插件（此处就用到了以上node.js环境支持）；</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903104407557.png" alt="image-20210903104407557"></p>
<p>如图所示在上方输入cmd,点击回车即可在此文件夹运行cmd窗口.</p>
<p>依次运行下面的命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.\picgo.exe install gitee-uploader   #gitee的插件</span><br><span class="line"></span><br><span class="line">./picgo install super-prefix  #　上传前文件重命名</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="创建gitee仓库"><a href="#创建gitee仓库" class="headerlink" title="创建gitee仓库"></a>创建gitee仓库</h2><p>仓库是用来存放上传的图片的。</p>
<ol>
<li>填写仓库名称</li>
<li>设置开源</li>
<li>选中模板</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903105641128.png" alt="image-20210903105641128"></p>
<h2 id="获取gitee-token-令牌"><a href="#获取gitee-token-令牌" class="headerlink" title="获取gitee token(令牌)"></a>获取gitee token(令牌)</h2><p>生成自己Gitee的token，用于下面的配置，使得Picgo-core可以操作你的仓库；</p>
<p>申请token:</p>
<ol>
<li>点击gitee里面自己的头像</li>
<li>点击设置</li>
<li>点击私人令牌</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903110011057.png" alt="image-20210903110011057"></p>
<p>点击生成令牌</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903110132505.png" alt="image-20210903110132505"></p>
<ol>
<li>私人令牌描述自己随便写即可</li>
<li>一定要勾选projects,这样picgo才能上传图片到你的gitee刚刚生成的库里面</li>
<li>点击提交</li>
<li>保存生成的token,下面要用到,一定要先复制好,这个token只会出现这一次</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903110231791.png" alt="image-20210903110231791"></p>
<h2 id="配置-picgo-config-json文件"><a href="#配置-picgo-config-json文件" class="headerlink" title="配置~/.picgo/config.json文件"></a>配置~/.picgo/config.json文件</h2><p>如下方式打开配置文件</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903105157434.png" alt="image-20210903105157434"></p>
<p>配置如下信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span>: <span class="string">&quot;gitee&quot;</span>, <span class="comment">// 代表当前的上传图床</span></span><br><span class="line">    <span class="attr">&quot;gitee&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;repo&quot;</span>: <span class="string">&quot;用户名/仓库名称 &quot;</span>,    <span class="comment">//  必填</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;——————————&quot;</span>,    <span class="comment">// gitee 私人令牌,刚刚获取的token 必填</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;img/&quot;</span>, <span class="comment">// 自定义存储路径，比如 img/ </span></span><br><span class="line">      <span class="attr">&quot;customUrl&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 没有自己的域名的话，可以默认为空，不填写</span></span><br><span class="line">      <span class="attr">&quot;branch&quot;</span>: <span class="string">&quot;master&quot;</span> <span class="comment">// 分支名，默认是 master</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;picgo-plugin-gitee-uploader&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;picgo-plugin-super-prefix&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;, <span class="comment">// 为插件预留</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Typora</category>
        <category>PicGo</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>PicGo</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA中快速添加main、System方法</title>
    <url>/2021/09/06/IDEA%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0main%E3%80%81System%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><strong>IDEA中快速添加main、System方法：</strong></p>
<p>今天就研究了一下如何在IEDA中实现下面2个功能:</p>
<ol>
<li>写main就能补全main方法</li>
<li>写syso就能补全System.out.println（）</li>
</ol>
<span id="more"></span>

<p>参考:<a href="https://blog.csdn.net/wangpengzhi19891223/article/details/78950047/?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.no_search_link&spm=1001.2101.3001.4242">IDEA中快速添加main、System方法</a></p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
  </entry>
  <entry>
    <title>git笔记</title>
    <url>/2021/09/04/git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Git的四个区域"><a href="#Git的四个区域" class="headerlink" title="Git的四个区域"></a>Git的四个区域</h1><p><strong>工作区</strong>(Workspace)</p>
<p>进行代码开发的的地方,也就是代码所在的文件夹，是你当前看到的，也是<strong>最新的</strong>。</p>
<p>平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作。</p>
<span id="more"></span>

<p><strong>暂存区</strong>(Stage)</p>
<p>.git目录下的index文件, 暂存区会记录<code>git add</code>添加文件的相关信息(文件名、大小、timestamp…)，不保存文件实体, 通过id指向每个文件实体。可以使用<code>git status</code>查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被git管理的。</p>
<p>当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过<code>git add</code>先提交到暂存区，被git管理。</p>
<p><strong>本地仓库(Repository)</strong></p>
<p>保存了对象被提交 过的各个版本，<strong>比起工作区和暂存区的内容，它要更旧一些</strong>。</p>
<p><code>git commit</code>后同步index的目录树到本地仓库，方便从下一步通过<code>git push</code>同步本地仓库与远程仓库的同步。</p>
<p><strong>远程仓库(Remote)</strong></p>
<p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904173327012.png" alt="image-20210904173327012"></p>
<p><strong>总结</strong></p>
<ol>
<li>任何对象都是在工作区中诞生和被修改；</li>
<li>任何修改都是从进入index区才开始被版本控制；</li>
<li><strong>只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹(也就是commit之后)；</strong></li>
<li>与协作者分享本地的修改，可以把它们push到远程仓库来共享。</li>
</ol>
<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904191305153.png" alt="image-20210904191305153"></p>
<h2 id="设置用户签名"><a href="#设置用户签名" class="headerlink" title="设置用户签名"></a>设置用户签名</h2><p>在命令行输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2><p>创建一个空文件,右键执行git bash here</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904191808364.png" alt="image-20210904191808364"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904192019305.png" alt="image-20210904192019305"></p>
<h2 id="切换到旧版本"><a href="#切换到旧版本" class="headerlink" title="切换到旧版本"></a>切换到旧版本</h2><ul>
<li><p>git checkout ：把整个git仓库文件回退到 commit 参数指定的版本</p>
</li>
<li><p>git checkout [] [–] ：回退 filepath 文件为 commit 参数指定的版本</p>
</li>
<li><p>git reset ：把git的HEAD指针指向到 commit 对应的版本，本地文件内容不会被回退</p>
</li>
<li><p>git reset –hard ：把git的HEAD指针指向到 commit 对应的版本，本地文件内容也会被回退</p>
</li>
</ul>
<h1 id="git-dif"><a href="#git-dif" class="headerlink" title="git dif"></a>git dif</h1><p>work tree (工作区) </p>
<p>index(缓冲区)</p>
<p>repository(本地仓库)</p>
<ol>
<li>git diff：是查看working tree与index的差别的。</li>
<li>git diff –cached：是查看index与repository的差别的。</li>
<li>git diff HEAD：是查看working tree和repository的差别的。其中：HEAD代表的是最近的一次commit的信息。</li>
</ol>
<p>如图所示，有区别则将两次对比的结果显示在输出中。对比没差别，就不显示。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904201909286.png" alt="image-20210904201909286"></p>
<h1 id="git-log-和git-reflog区别"><a href="#git-log-和git-reflog区别" class="headerlink" title="git log 和git reflog区别"></a>git log 和git reflog区别</h1><p>区别:</p>
<ul>
<li><p>git log可以显示所有提交过的版本信息，<strong>不包括已经被删除的 commit 记录和 reset 的操作</strong>。</p>
</li>
<li><p>git reflog是显示所有的操作记录，包括提交，回退的操作。一般用来找出操作记录中的版本号，进行回退.</p>
</li>
</ul>
<p><strong>例子</strong></p>
<p>如图所示,当前已经执行了三次提交,并且Head指针指在了第三次提交处.</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904193632666.png" alt="image-20210904193632666"></p>
<p>如果此时执行如下指令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard 38a6bd891e86644b3772388a122eebb97329b22e</span><br><span class="line">git log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到 log里面没有显示之前的third commit操作的信息了.而此时如果想退回third 的那个版本,我们该怎么获取版本号嘞,此时就可以使用git reflog命令.</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904194023699.png"></p>
<p>执行如下命令,则会显示所有的操作记录，包括提交，回退，合并，删除分支等等的操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<p>可以看到其中显示了third commit 的版本号。通过使用此版本号，我们可以执行命令跳回第三个版本。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904194652751.png" alt="image-20210904194652751"></p>
<p>同时其中还记录了我们刚刚的reset操作。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904194859950.png" alt="image-20210904194859950"></p>
<p>另外可<a href="https://blog.csdn.net/chenpuzhen/article/details/92084229">参考git log和git reflog的区别</a>.</p>
<p>#撤销修改</p>
<ol>
<li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li>
<li>当你不但改乱了工作区某个文件的内容，<strong>还添加到了暂存区时</strong>，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</li>
<li><strong>已经提交了不合适的修改到版本库(即本地库)时</strong>，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节，不过前提是没有推送到远程库。</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1vy4y1s7k6?spm_id_from=pageDriver">尚硅谷 git视频</a>,  <a href="https://blog.csdn.net/zhongshun0928/article/details/119159273">视频配套他人笔记1</a><a href="https://blog.csdn.net/unique_perfect/article/details/104833391">视频配套他人笔记2</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>typora使用技巧</title>
    <url>/2021/09/03/typora%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>#Typora中文输入状态下英文符号输出</p>
<p>Typora可以使用ctrl + . 在中文输入状态下英文符号输出，ctrl + . 即可改回中文输入状态输出中文符号。</p>
<span id="more"></span>

<p>sdfasdf</p>
]]></content>
      <categories>
        <category>typora</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行语法格式中常用符号的含义</title>
    <url>/2021/09/04/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<p>在描述命令行参数的时候，对其格式有些约定俗成的写法，各系统之间也有差别。一般采用的格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令&lt;必选参数1|必选参数2&gt; [-option &#123;必选参数1|必选参数2|必选参数3&#125;] [可选参数…]&#123;(默认参数)|参数|参数&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>命令格式中常用的几个符号含义如下</strong>：</p>
<p>　　尖括号&lt; &gt;：必选参数，实际使用时应将其替换为所需要的参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">　　命令语法：git help &lt;name&gt;</span><br><span class="line">　　</span><br><span class="line">　　实际使用：git help config 或 git help branch 或 ... (name被替换为实际的内容)</span><br></pre></td></tr></table></figure>

<p>　　大括号{ }：必选参数，内部使用，包含此处允许使用的参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">　　命令语法：git stash &#123;apply | pop&#125;</span><br><span class="line"></span><br><span class="line">　　实际使用：git stash apply 或 git stash pop (只能在必选参数apply或pop中选一个)</span><br></pre></td></tr></table></figure>

<p>　　方括号[ ]：可选参数，可写可不写</p>
<p>　　小括号( )：指明参数的默认值，只用于{ }中</p>
<p>　　竖线|：用于分隔多个互斥参数，含义为“或”，使用时只能选择其中的一个</p>
<p>　　省略号…：任意多个参数</p>
<p><strong>说明：</strong></p>
<p>大括号和尖括号的区别为：大括号中只能选择所列举的必选参数（或之一），尖括号中却需要根据实际替换必选参数</p>
<p>参考<a href="https://www.cnblogs.com/uakora/p/11809501.html">命令行符号的意义</a></p>
]]></content>
      <categories>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建自己的个人博客</title>
    <url>/2021/09/01/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>用hexo和github搭建自己的个人博客</p>
<span id="more"></span>



<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><ol>
<li>git</li>
<li>node.js</li>
<li>hexo</li>
</ol>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>直接在点击下面链接下载安装。然后按照步骤安装即可。</p>
<p><a href="https://git-scm.com/">https://git-scm.com/</a></p>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>同样点击下面链接下载安装。然后按照步骤安装即可。</p>
<p><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>通过下面命令进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>执行以下命令确认hexo已安装好，该命令会显示hexo的版本及依赖的包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>如果安装好则会显示以下信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: win32 10.0.18362</span><br><span class="line">node: 16.8.0</span><br><span class="line">v8: 9.2.230.21-node.20</span><br><span class="line">uv: 1.42.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.2</span><br><span class="line">modules: 93</span><br><span class="line">nghttp2: 1.42.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 6.0.2</span><br><span class="line">openssl: 1.1.1k+quic</span><br><span class="line">cldr: 39.0</span><br><span class="line">icu: 69.1</span><br><span class="line">tz: 2021a</span><br><span class="line">unicode: 13.0</span><br><span class="line">ngtcp2: 0.1.0-DEV</span><br><span class="line">nghttp3: 0.1.0-DEV</span><br></pre></td></tr></table></figure>

<h1 id="hexo创建博客"><a href="#hexo创建博客" class="headerlink" title="hexo创建博客"></a>hexo创建博客</h1><p>创建一个空白文件夹blog，作为博客根目录，在该根目录下，运行cmd窗口.</p>
<p>注意文件夹必须为空</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903145523286.png" alt="image-20210903145523286"></p>
<p>然后执行如下命令初始化，执行以下命令初始化博客。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>分别执行下面命令，启动服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl #清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo g  #生成静态网站文件</span><br><span class="line">hexo s  #启动服务器。默认情况下，访问网址为： http://localhost:4000/</span><br></pre></td></tr></table></figure>

<p>默认是4000端口，在浏览器输入<a href="http://localhost:4000就可以访问默认博客了">http://localhost:4000就可以访问默认博客了</a></p>
<p>到此默认的hexo博客就建立好了,但是大家一般会使用其他主题来使得博客更加好看,下面介绍next主题.</p>
<p>更多hexo命令解释请看<a href="https://hexo.io/zh-cn/docs/commands.html#server">https://hexo.io/zh-cn/docs/commands.html#server</a></p>
<h1 id="next主题"><a href="#next主题" class="headerlink" title="next主题"></a>next主题</h1><p>使用如下git指令下载NexT最新的主题文件(注意要在博客目录下运行cmd窗口执行如下命令)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>现在Hexo中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于next主题目录下，主要用于配置主题相关的选项。将前者称为站点配置文件， 后者称为主题配置文件。</p>
<h2 id="站点文件配置"><a href="#站点文件配置" class="headerlink" title="站点文件配置"></a>站点文件配置</h2><p>找到站点的_config.yml文件,修改其中如下的值。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903154538650.png" alt="image-20210903154538650"></p>
<table>
<thead>
<tr>
<th><code>title</code></th>
<th>网站标题</th>
</tr>
</thead>
<tbody><tr>
<td><code>subtitle</code></td>
<td>网站副标题</td>
</tr>
<tr>
<td><code>description</code></td>
<td>网站描述</td>
</tr>
<tr>
<td><code>keywords</code></td>
<td>网站的关键词。支持多个关键词。</td>
</tr>
<tr>
<td><code>author</code></td>
<td>您的名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<h2 id="站点文件配置-1"><a href="#站点文件配置-1" class="headerlink" title="站点文件配置"></a>站点文件配置</h2><h3 id="菜单项"><a href="#菜单项" class="headerlink" title="菜单项"></a>菜单项</h3><p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 </p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903154935622.png" alt="image-20210903154935622"></p>
<h3 id="初始化对应的Menu文件夹"><a href="#初始化对应的Menu文件夹" class="headerlink" title="初始化对应的Menu文件夹"></a>初始化对应的Menu文件夹</h3><p>配置完菜单之后,还要在终端中输入（前提在<strong>Hexo</strong>文件路径下）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>否则会出现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot GET/xxx 错误</span><br></pre></td></tr></table></figure>

<p>同时还要在<code>blog/source/categories</code>中<strong>index.md</strong>文件，添加<code>type: categories</code>，</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903155908305.png" alt="image-20210903155908305"></p>
<p>其他菜单项目也同理创建。</p>
<h3 id="next四种主题"><a href="#next四种主题" class="headerlink" title="next四种主题"></a>next四种主题</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>

<p>选择其中一个就行,我选择的是Mist</p>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>avatar</code>， 值设置成头像的链接地址，图片可以传到next/source/uploads目录下。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">avatar: /uploads/avatar.jpg</span><br></pre></td></tr></table></figure>



<h3 id="字数统计-阅读时长"><a href="#字数统计-阅读时长" class="headerlink" title="字数统计+阅读时长"></a>字数统计+阅读时长</h3><ol>
<li>安装hexo-wordcount</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>

<ol>
<li>配置主题文件</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: <span class="literal">true</span></span><br><span class="line">  wordcount: <span class="literal">true</span></span><br><span class="line">  min2read: <span class="literal">true</span></span><br><span class="line">  totalcount: <span class="literal">true</span></span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h3><p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。在xxx.md的文章中使用</p>
<p>使用下面标签即可，在标签之前的会在主页显示，标签之后的则在点击阅读更多之后显示。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903160122768.png" alt="image-20210903160122768"></p>
<h1 id="修改文章目录导航"><a href="#修改文章目录导航" class="headerlink" title="修改文章目录导航"></a>修改文章目录导航</h1><h2 id="取消数字编号"><a href="#取消数字编号" class="headerlink" title="取消数字编号"></a>取消数字编号</h2><p>在主题配置文件中关闭目录中的数字编号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\_config.ymltoc:</span><br><span class="line">  number: false  # 关闭目录中的数字编号</span><br></pre></td></tr></table></figure>

<h2 id="展开全部目录层级"><a href="#展开全部目录层级" class="headerlink" title="展开全部目录层级"></a>展开全部目录层级</h2><p>默认情况下文章的多级目录是折叠的，点击才会触发下级菜单的展开，并且并且同时只能展开一个目录分支，这会造成在点击不同目录标题的时候目录跳来跳去。如果你想实现默认展开全部目录的功能，可以在自定义样式文件中添加以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\source\css\_custom\custom.styl//TOC目录默认全部展开</span><br><span class="line">.post-toc .nav .nav-child &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="默认展开两级目录"><a href="#默认展开两级目录" class="headerlink" title="默认展开两级目录"></a>默认展开两级目录</h2><p>通常文章内会出现多级标题，对应的目录里就会有多级导航出现，这时候一些原本你不希望出现的次要标题也会在目录中出现并且无法折叠。可以通过以下样式实现默认只展开两级目录，这样以来就通过一个折中的方案完美解决了目录折叠的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\source\css\_custom\custom.styl//TOC目录默认展开两级</span><br><span class="line">.post-toc .nav .nav-level-1&gt;.nav-child &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="只显示两级目录"><a href="#只显示两级目录" class="headerlink" title="只显示两级目录"></a>只显示两级目录</h2><p>如果你根本不想让三级及以上的标题出现 TOC 导航目录中，可以考虑在自定义样式文件中添加以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\source\css\_custom\custom.styl//TOC目录默认只显示两级目录</span><br><span class="line">.nav-level-2 &gt; .nav-child &#123;</span><br><span class="line">  display: none !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主动隐藏文章目录"><a href="#主动隐藏文章目录" class="headerlink" title="主动隐藏文章目录"></a>主动隐藏文章目录</h2><p>如果你写了一篇并不算长的文章，没有层层嵌套的多级目录结构，此时侧边的文章目录空荡荡的就有点鸡肋了。修改侧边栏布局模板中的相关逻辑代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\layout\_macro\sidebar.swig- &#123;% set display_toc = is_post and theme.toc.enable %&#125;</span><br><span class="line">+ &#123;% set display_toc = is_post and theme.toc.enable and not page.hide_toc %&#125;</span><br></pre></td></tr></table></figure>

<p>然后就可在 Front-Matter 中设定变量 hide_toc 用于控制是否隐藏侧边目录</p>
<h1 id="Mist外观下，修改侧边栏在左边"><a href="#Mist外观下，修改侧边栏在左边" class="headerlink" title="Mist外观下，修改侧边栏在左边"></a>Mist外观下，修改侧边栏在左边</h1><p>参考：</p>
<ul>
<li><p><a href="https://blog.fish-404.icu/Blog-adjust-sidebar-nextmist-left/">Blog-调整NexT主题Mist外观侧边栏在左</a></p>
</li>
<li><p><a href="http://mashirosorata.vicp.io/HEXO-NEXT%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE.html">HEXO+NEXT主题个性化配置|SORA</a></p>
</li>
</ul>
<p>在NexT主题的Mist外观下，侧边栏默认在右，而只有在<code>Pisces</code>，<code>Gemini</code>这两种外观下才可以通过<code>_config.yml</code>直接修改选择左侧或是右侧。</p>
<p>在此过程中需要修改如下几个文件：</p>
<ul>
<li>sidebar.styl</li>
<li>sidebar-toggle.styl</li>
<li>back-to-top.styl</li>
<li>motion.js</li>
</ul>
<p> <strong>1.sidebar.styl</strong></p>
<p>路径：<code>.\themes\next\source\css\_common\components\sidebar\</code><br>将此文件的第3行<code>right</code>改为<code>left</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>2.sidebar-toggle.styl</strong></p>
<p>路径：<code>.\themes\next\source\css\_common\components\sidebar\</code><br>同样将第3行冒号前的<code>right</code>改为<code>left</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">left</span>: $b2t-position-right;</span><br></pre></td></tr></table></figure>

<p><strong>3.back-to-top.styl</strong></p>
<p>路径：<code>.\themes\next\source\css\_common\components\</code><br>将第5行冒号前的<code>right</code>改为<code>left</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">left</span>: $b2t-position-right;</span><br></pre></td></tr></table></figure>

<p><strong>4.motion.js</strong></p>
<p>路径：<code>.\themes\next\source\js\src\motion.js</code><br>利用搜索功能找到改文档中的<code>paddingRight</code>字段，将<code>paddingRight</code>改为<code>paddingLeft</code>(共两处)。</p>
<p>重新部署即可完成侧边栏在左的设置。</p>
<p><strong>修改窗口缩小bug</strong></p>
<p>仅使用上面的方案情况下，如果侧边栏的设置是展开状态，在浏览器窗口缩小时会导致侧边栏仍然存在且占据相当大的位置。做以下调整。</p>
<p>找到<code>./themes/source/js/src/motion.js</code>文件，在<code>$(document).ready(function ()&#123;&#125;)</code>内添加内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    <span class="keyword">var</span> bwol=<span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">	    <span class="keyword">if</span>(bwol &lt; <span class="number">975</span>)&#123;</span><br><span class="line">		$(<span class="string">&#x27;aside#sidebar&#x27;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">		$(<span class="string">&#x27;body&#x27;</span>).css(<span class="string">&quot;paddingLeft&quot;</span>,<span class="string">&quot;0px&quot;</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    <span class="keyword">var</span> bwos=<span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">	    bwos &lt; <span class="number">975</span> &amp;&amp; $(<span class="string">&#x27;body&#x27;</span>).velocity(<span class="string">&#x27;stop&#x27;</span>).velocity(&#123;<span class="attr">paddingLeft</span>: <span class="number">0</span>&#125;,<span class="number">0</span>);</span><br><span class="line">	    <span class="keyword">if</span>($(<span class="string">&#x27;aside#sidebar&#x27;</span>).css(<span class="string">&#x27;display&#x27;</span>) != <span class="string">&#x27;none&#x27;</span> &amp;&amp; $(<span class="string">&#x27;aside#sidebar&#x27;</span>).css(<span class="string">&#x27;width&#x27;</span>)!=<span class="string">&#x27;0px&#x27;</span>)</span><br><span class="line">		$(<span class="string">&#x27;body&#x27;</span>).velocity(<span class="string">&#x27;stop&#x27;</span>).velocity(&#123;<span class="attr">paddingLeft</span>: <span class="number">350</span>&#125;,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	   NexT.motion = &#123;&#125;;</span><br><span class="line">	   </span><br><span class="line">	   ...</span><br></pre></td></tr></table></figure>

<h1 id="Hexo博客显示图片办法"><a href="#Hexo博客显示图片办法" class="headerlink" title="Hexo博客显示图片办法"></a>Hexo博客显示图片办法</h1><h2 id="方法一-使用typora-Picgo-gitee"><a href="#方法一-使用typora-Picgo-gitee" class="headerlink" title="方法一 使用typora+Picgo+gitee"></a>方法一 使用typora+Picgo+gitee</h2><a href="/2021/09/03/Typora+PicGo-Core%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%8A/" title="使用typora+Picgo+gitee 建立图床,显示hexo博客中图片">使用typora+Picgo+gitee 建立图床,显示hexo博客中图片</a>

<h2 id="方法二-建立同名文件夹"><a href="#方法二-建立同名文件夹" class="headerlink" title="方法二   建立同名文件夹"></a>方法二   建立同名文件夹</h2><ol>
<li><p>修改博客配置。</p>
<p>修改博客根目录中<code>_config.yml</code>文件的配置项<code>post_asset_folder</code>为<code>true</code>：</p>
<p>2.通过<code>hexo new xxx</code>新建博客后，会产生一个和文件同名的文件夹。(或者自己建立一个xxx.md文件和xxx文件夹)</p>
</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903145943342.png" alt="image-20210903145943342"></p>
<p>在博客根目录中下使用npm安装插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>当文章需要添加图片时，将需要添加的图片放入同名的文件夹中，使用相对位置索引到该图片,如下所示.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![示例](./xxxx/a.png)</span><br></pre></td></tr></table></figure>

<h1 id="站内文章引用"><a href="#站内文章引用" class="headerlink" title="站内文章引用"></a>站内文章引用</h1><p>在写文章的过程中，有时候需要引用站内的其他文章。可以通过内置的标签插件的语法<code>post_link</code>来实现引用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br></pre></td></tr></table></figure>

<p> 引用 xxx.md</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link xxx %&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link xxx 要显示的内容 %&#125;</span><br></pre></td></tr></table></figure>

<p>要显示的内容不写,默认显示标题</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="next5中文目录点击无法跳转问题"><a href="#next5中文目录点击无法跳转问题" class="headerlink" title="next5中文目录点击无法跳转问题"></a>next5中文目录点击无法跳转问题</h2><p><strong>解决方案</strong></p>
<p>这个错误很明显，因为控制台已经告诉我错误代码在 <code>post-details.js</code>里了，顺着提示找到 <code>themes\next\source\js\src\post-details.js</code>，找到第 73 行为目录绑定点击事件的方法，会看到：</p>
<p>[<img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20201217170155109.png" alt="image-20201217170155109"></p>
<p>添加如下代码即可:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对获取到的url进行重编码</span></span><br><span class="line">targetSelector = <span class="built_in">decodeURI</span>(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;href&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>然后 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 重新跑一下，发现目录就正常了。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>文本文件与二进制文件的区别</title>
    <url>/2021/09/04/%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="文本文件与二进制文件的定义"><a href="#文本文件与二进制文件的定义" class="headerlink" title="文本文件与二进制文件的定义"></a>文本文件与二进制文件的定义</h1><p>计算机的存储在物理上是二进制的，所以<strong>文本文件与二进制文件的区别并不是物理上的，而是逻辑上的</strong>。这两者只是在编码层次上有差异。简单来说，</p>
<ul>
<li>文本文件是基于字符编码的文件，常见的编码有ASCII编码，UNICODE编码等等。</li>
<li>二进制文件是基于值编码的文件，你可以根据具体应用，指定某个值是什么意思（这样一个过程，可以看作是自定义编码与解码的过程）。</li>
</ul>
<span id="more"></span>

<h1 id="文本文件与二进制文件的区别"><a href="#文本文件与二进制文件的区别" class="headerlink" title="文本文件与二进制文件的区别"></a>文本文件与二进制文件的区别</h1><p>文本文件：</p>
<ol>
<li>基本上是定长编码的(也有非定长的编码如UTF-8)。</li>
</ol>
<p>二进制文件：</p>
<ol>
<li>二进制文件可看成是变长编码的，因为是值编码嘛，多少个比特代表一个值，完全由决定。</li>
</ol>
<p>文本文件的存储与其读取基本上是个逆过程。而二进制文件的存取显然与文本文件的存取差不多，只是编／解码方式不同而已</p>
<p>参考:<a href="https://blog.csdn.net/colourful_sky/article/details/80334250">文本文件和二进制文件的差异和区别</a></p>
]]></content>
      <categories>
        <category>文件</category>
      </categories>
      <tags>
        <tag>文本文件</tag>
        <tag>二进制文件</tag>
      </tags>
  </entry>
</search>
