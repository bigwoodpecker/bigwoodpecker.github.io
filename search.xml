<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IDEA中快速添加main、System方法</title>
    <url>/2021/09/06/IDEA%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0main%E3%80%81System%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><strong>IDEA中快速添加main、System方法：</strong></p>
<p>今天就研究了一下如何在IEDA中实现下面2个功能:</p>
<ol>
<li>写main就能补全main方法</li>
<li>写syso就能补全System.out.println（）</li>
</ol>
<span id="more"></span>

<p>参考:<a href="https://blog.csdn.net/wangpengzhi19891223/article/details/78950047/?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.no_search_link&spm=1001.2101.3001.4242">IDEA中快速添加main、System方法</a></p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
  </entry>
  <entry>
    <title>Residual Correlation in Graph Neural Network Regression</title>
    <url>/2021/09/08/Residual-Correlation-in-Graph-Neural-Network-Regression/</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>​        图神经网络将每个顶点的邻域特征转换为顶点的向量表示。然后，每个顶点的表示被独立地用于预测它的标签。这个标准的处理方式隐含地假设顶点标签在给定其邻域特征的情况下是有条件独立的。然而，这是一个强烈的假设，我们表明，在许多真实的图数据集上，这是远远不正确的。<strong>在回归任务中，我们发现这种条件独立假设严重限制了预测能力</strong>。这并不奇怪，因为传统的基于图的半监督学习方法，如标签传播，通过明确地建模预测结果的相关性，它是以相反的方式工作。</p>
<p>​        在这里，我们用一个可解释和有效的框架来解决这个问题，这个框架可以通过简单地利用回归残差中的相关结构来改进任何图神经网络的结构。<strong>具体地说，我们用参数化的多元高斯模型对残差在顶点上的联合分布进行建模，并通过最大化观测标签的边际似然函数来估计参数</strong>。我们的框架实现了比竞争基线更高的精度，学习到的参数可以解释为连接顶点之间的相关性强度。此外，我们开发了低方差、无偏模型参数估计的线性时间算法，允许我们扩展到大型网络。我们还提供了我们方法的一个基本版本，该版本对相关结构做了更强的假设，但实现起来很轻松，通常以最小的开销获得很大的实际性能。</p>
]]></content>
      <categories>
        <category>图神经网络</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2021/11/04/MySQL/</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>什么是数据库？什么是数据库管理系统？什么是SQL？他们之间的关系是什么？</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库：</span><br><span class="line">	英文单词DataBase，简称DB。按照一定格式存储数据的一些文件的组合。</span><br><span class="line">	顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</span><br><span class="line">数据库管理系统：</span><br><span class="line">		DataBaseManagement，简称DBMS。</span><br><span class="line">		数据库管理系统是专门用来管理数据库中数据的，数据库管理系统可以对数据库当中的数据进行增删改查。</span><br><span class="line">常见的数据库管理系统：</span><br><span class="line">		MySQL、Oracle、MS SqlServer、DB2、sybase等....</span><br></pre></td></tr></table></figure>

<h1 id="SQL：结构化查询语言"><a href="#SQL：结构化查询语言" class="headerlink" title="SQL：结构化查询语言"></a>SQL：结构化查询语言</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">程序员需要学习SQL语句，程序员通过编写SQL语句，然后DBMS负责执行SQL语句，最终来完成数据库中数据的增删改查操作。</span><br><span class="line">SQL是一套标准，程序员主要学习的就是SQL语句，这个SQL在mysql中可以使用</span><br><span class="line">同时在Oracle中也可以使用，在DB2中也可以使用。</span><br><span class="line"></span><br><span class="line">三者之间的关系？</span><br><span class="line">	DBMS--执行--&gt; SQL --操作--&gt; DB</span><br><span class="line"></span><br><span class="line">先安装数据库管理系统MySQL，然后学习SQL语句怎么写，编写SQL语句之后，DBMS</span><br><span class="line">对SQL语句进行执行，最终来完成数据库的数据管理。</span><br></pre></td></tr></table></figure>

<h2 id="关于SQL语句的分类"><a href="#关于SQL语句的分类" class="headerlink" title="关于SQL语句的分类"></a>关于SQL语句的分类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL语句有很多，最好进行分门别类，这样更容易记忆。</span><br><span class="line">	分为：</span><br><span class="line">	DQL：</span><br><span class="line">		数据查询语言（凡是带有select关键字的都是查询语句）</span><br><span class="line">		select...</span><br><span class="line"></span><br><span class="line">	DML：</span><br><span class="line">		数据操作语言（凡是对表当中的数据进行增删改的都是DML）</span><br><span class="line">		insert delete update</span><br><span class="line">		insert 增</span><br><span class="line">		delete 删</span><br><span class="line">		update 改</span><br><span class="line">		这个主要是操作表中的数据data。</span><br><span class="line"></span><br><span class="line">	DDL：</span><br><span class="line">		数据定义语言</span><br><span class="line">		凡是带有create、drop、alter的都是DDL。</span><br><span class="line">		DDL主要操作的是表的结构。不是表中的数据。</span><br><span class="line">		create：新建，等同于增</span><br><span class="line">		drop：删除</span><br><span class="line">		alter：修改</span><br><span class="line">		这个增删改和DML不同，这个主要是对表结构进行操作。</span><br><span class="line"></span><br><span class="line">	TCL：</span><br><span class="line">		是事务控制语言</span><br><span class="line">		包括：</span><br><span class="line">		事务提交：commit;</span><br><span class="line">		事务回滚：rollback;</span><br><span class="line"></span><br><span class="line">	DCL：</span><br><span class="line">		是数据控制语言。</span><br><span class="line">		例如：授权grant、撤销权限revoke....</span><br></pre></td></tr></table></figure>

<h1 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">退出mysql ：exit;</span><br><span class="line"></span><br><span class="line">查看mysql中有哪些数据库 : show databases;  #注意：以分号结尾，分号是英文的分号。</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">	+--------------------+</span><br><span class="line">	| Database           |</span><br><span class="line">	+--------------------+</span><br><span class="line">	| information_schema |</span><br><span class="line">	| mysql              |</span><br><span class="line">	| performance_schema |</span><br><span class="line">	| test               |</span><br><span class="line">	+--------------------+</span><br><span class="line">	mysql默认自带了4个数据库。</span><br><span class="line">	</span><br><span class="line">选择使用某个数据库:</span><br><span class="line">mysql&gt; use test;</span><br><span class="line">	Database changed</span><br><span class="line">	表示正在使用一个名字叫做test的数据库。</span><br><span class="line"></span><br><span class="line">创建数据库:</span><br><span class="line">mysql&gt; create database bjpowernode;</span><br><span class="line">	Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">		+--------------------+</span><br><span class="line">		| Database           |</span><br><span class="line">		+--------------------+</span><br><span class="line">		| information_schema |</span><br><span class="line">		| bjpowernode        |</span><br><span class="line">		| mysql              |</span><br><span class="line">		| performance_schema |</span><br><span class="line">		| test               |</span><br><span class="line">		+--------------------+</span><br><span class="line">		</span><br><span class="line">查看某个数据库下有哪些表:</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line"></span><br><span class="line">查看mysql数据库的版本号：</span><br><span class="line">mysql&gt; select version();</span><br><span class="line">		+-----------+</span><br><span class="line">		| version() |</span><br><span class="line">		+-----------+</span><br><span class="line">		| 5.5.36    |</span><br><span class="line">		+-----------+</span><br><span class="line">		</span><br><span class="line">查看当前使用的是哪个数据库:</span><br><span class="line">mysql&gt; select database();</span><br><span class="line">	+-------------+</span><br><span class="line">	| database()  |</span><br><span class="line">	+-------------+</span><br><span class="line">	| bjpowernode |</span><br><span class="line">	+-------------+</span><br><span class="line"></span><br><span class="line">导入一下提前准备好的数据：bjpowernode.sql 这个文件中是练习准备的数据库表。</span><br><span class="line">怎么将sql文件中的数据导入</span><br><span class="line">mysql&gt; source D:\course\03-MySQL\document\bjpowernode.sql #注意：路径中不要有中文！！！！</span><br><span class="line"></span><br><span class="line">查看表的结构：</span><br><span class="line">mysql&gt; desc dept; # describe缩写为：desc</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| DEPTNO | int(2)      | NO   | PRI | NULL    |       |部门编号</span><br><span class="line">| DNAME  | varchar(14) | YES  |     | NULL    |       |部门名字</span><br><span class="line">| LOC    | varchar(13) | YES  |     | NULL    |       |地理位置</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库当中最基本的单元是表：table</span><br><span class="line"></span><br><span class="line">	什么是表table？为什么用表来存储数据呢？</span><br><span class="line"></span><br><span class="line">		姓名	性别	年龄(列：字段) </span><br><span class="line">		---------------------------</span><br><span class="line">		张三	男			20            -------&gt;行（记录）</span><br><span class="line">		李四	女			21            -------&gt;行（记录）</span><br><span class="line">		王五	男			22            -------&gt;行（记录）</span><br><span class="line">	</span><br><span class="line">	数据库当中是以表格的形式表示数据的。因为表比较直观。</span><br><span class="line"></span><br><span class="line">	任何一张表都有行和列：</span><br><span class="line">		行（row）：被称为数据/记录。</span><br><span class="line">		列（column）：被称为字段。</span><br><span class="line">        </span><br><span class="line">	姓名字段、性别字段、年龄字段。</span><br><span class="line"></span><br><span class="line">	了解一下：</span><br><span class="line">		每一个字段都有：字段名、数据类型、约束等属性。字段名可以理解，是一个普通的名字，见名知意就行。</span><br><span class="line">		数据类型：字符串，数字，日期等，后期讲。</span><br><span class="line">		约束：约束也有很多，其中一个叫做唯一性约束，这种约束添加之后，该字段中的数据不能重复。		</span><br></pre></td></tr></table></figure>

<h1 id="查询：select"><a href="#查询：select" class="headerlink" title="查询：select"></a>查询：select</h1><h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询一个字段？</span><br><span class="line">select 字段名 from 表名; </span><br><span class="line"># 其中要注意：select和from都是关键字。</span><br><span class="line"># 字段名和表名都是标识符。</span><br><span class="line"></span><br><span class="line">强调：对于SQL语句来说，是通用的，所有的SQL语句以“;”结尾。</span><br><span class="line">	 另外SQL语句不区分大小写，都行。</span><br><span class="line"></span><br><span class="line">查询两个字段，或者多个字段使用逗号隔开“,”</span><br><span class="line">查询部门编号和部门名</span><br><span class="line">select deptno,dname from dept;</span><br><span class="line">    +--------+------------+</span><br><span class="line">    | deptno | dname      |</span><br><span class="line">    +--------+------------+</span><br><span class="line">    |     10 | ACCOUNTING |</span><br><span class="line">    |     20 | RESEARCH   |</span><br><span class="line">    |     30 | SALES      |</span><br><span class="line">    |     40 | OPERATIONS |</span><br><span class="line">    +--------+------------+</span><br><span class="line">    </span><br><span class="line">查询所有字段</span><br><span class="line">第一种方式：可以把每个字段都写上</span><br><span class="line">	select a,b,c,d,e,f... from tablename;</span><br><span class="line"></span><br><span class="line">第二种方式：可以使用*</span><br><span class="line">	select * from dept;</span><br><span class="line">		+--------+------------+----------+</span><br><span class="line">		| DEPTNO | DNAME      | LOC      |</span><br><span class="line">		+--------+------------+----------+</span><br><span class="line">        |     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">        |     20 | RESEARCH   | DALLAS   |</span><br><span class="line">        |     30 | SALES      | CHICAGO  |</span><br><span class="line">        |     40 | OPERATIONS | BOSTON   |</span><br><span class="line">        +--------+------------+----------+</span><br><span class="line"></span><br><span class="line">    这种方式的缺点：</span><br><span class="line">        1、效率低</span><br><span class="line">        2、可读性差。</span><br><span class="line">    在实际开发中不建议，可以自己玩没问题。</span><br><span class="line">    你可以在DOS命令窗口中想快速的看一看全表数据可以采用这种方式。</span><br><span class="line"></span><br><span class="line">给查询的列起别名：使用as关键字起别名。</span><br><span class="line">  mysql&gt; select deptno,dname as deptname from dept;</span><br><span class="line">      +--------+------------+</span><br><span class="line">      | deptno | deptname   |</span><br><span class="line">      +--------+------------+</span><br><span class="line">      |     10 | ACCOUNTING |</span><br><span class="line">      |     20 | RESEARCH   |</span><br><span class="line">      |     30 | SALES      |</span><br><span class="line">      |     40 | OPERATIONS |</span><br><span class="line">      +--------+------------+</span><br><span class="line">  注意：只是将显示的查询结果列名显示为deptname，原表列名还是叫：dname</span><br><span class="line">  记住：select语句是永远都不会进行修改操作的。（因为只负责查询）</span><br><span class="line"></span><br><span class="line">  as关键字可以省略吗？可以的</span><br><span class="line">    mysql&gt; select deptno,dname deptname from dept;</span><br><span class="line">    </span><br><span class="line">假设起别名的时候，别名里面有空格，怎么办？   </span><br><span class="line">select deptno,dname &#x27;dept name&#x27; from dept; //加单引号</span><br><span class="line">select deptno,dname &quot;dept name&quot; from dept; //加双引号</span><br><span class="line">      +--------+------------+</span><br><span class="line">      | deptno | dept name  |</span><br><span class="line">      +--------+------------+</span><br><span class="line">      |     10 | ACCOUNTING |</span><br><span class="line">      |     20 | RESEARCH   |</span><br><span class="line">      |     30 | SALES      |</span><br><span class="line">      |     40 | OPERATIONS |</span><br><span class="line">      +--------+------------+</span><br><span class="line">注意：在所有的数据库当中，字符串统一使用单引号括起来，单引号是标准，双引号在oracle数据库中用不了。但是在mysql中可以使用。</span><br></pre></td></tr></table></figure>

<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>条件查询：不是将表中所有数据都查出来。是查询出来符合条件的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询语法格式：</span><br><span class="line">    select</span><br><span class="line">      字段1,字段2,字段3....</span><br><span class="line">    from </span><br><span class="line">      表名</span><br><span class="line">    where</span><br><span class="line">      条件;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">都有哪些条件？</span><br><span class="line">= 等于</span><br><span class="line">查询薪资等于800的员工姓名和编号？</span><br><span class="line">  select empno,ename from emp where sal = 800;</span><br><span class="line">查询SMITH的编号和薪资？</span><br><span class="line">  select empno,sal from emp where ename = &#x27;SMITH&#x27;; //字符串使用单引号</span><br><span class="line"></span><br><span class="line">&lt;&gt; 或!= 不等于</span><br><span class="line">查询薪资不等于800的员工姓名和编号？</span><br><span class="line">  select empno,ename from emp where sal != 800;</span><br><span class="line">  select empno,ename from emp where sal &lt;&gt; 800; // 小于号和大于号组成的不等号</span><br><span class="line">  </span><br><span class="line">&lt; 小于</span><br><span class="line">查询薪资小于2000的员工姓名和编号？</span><br><span class="line">  mysql&gt; select empno,ename,sal from emp where sal &lt; 2000;</span><br><span class="line">  +-------+--------+---------+</span><br><span class="line">  | empno | ename  | sal     |</span><br><span class="line">  +-------+--------+---------+</span><br><span class="line">  |  7369 | SMITH  |  800.00 |</span><br><span class="line">  |  7499 | ALLEN  | 1600.00 |</span><br><span class="line">  |  7521 | WARD   | 1250.00 |</span><br><span class="line">  +-------+--------+---------+</span><br><span class="line"></span><br><span class="line">&lt;= 小于等于</span><br><span class="line">查询薪资小于等于3000的员工姓名和编号？</span><br><span class="line">  select empno,ename,sal from emp where sal &lt;= 3000;</span><br><span class="line"></span><br><span class="line">&gt; 大于</span><br><span class="line">查询薪资大于3000的员工姓名和编号？</span><br><span class="line">  select empno,ename,sal from emp where sal &gt; 3000;</span><br><span class="line"></span><br><span class="line">&gt;= 大于等于</span><br><span class="line">查询薪资大于等于3000的员工姓名和编号？</span><br><span class="line">  select empno,ename,sal from emp where sal &gt;= 3000;</span><br><span class="line"></span><br><span class="line">between … and …. 两个值之间, 等同于 &gt;= and &lt;=</span><br><span class="line">查询薪资在2450和3000之间的员工信息？包括2450和3000</span><br><span class="line">  第一种方式：&gt;= and &lt;= （and是并且的意思。）</span><br><span class="line">    select empno,ename,sal from emp where sal &gt;= 2450 and sal &lt;= 3000;</span><br><span class="line">    +-------+-------+---------+</span><br><span class="line">    | empno | ename | sal     |</span><br><span class="line">    +-------+-------+---------+</span><br><span class="line">    |  7566 | JONES | 2975.00 |</span><br><span class="line">    |  7698 | BLAKE | 2850.00 |</span><br><span class="line">    |  7782 | CLARK | 2450.00 |</span><br><span class="line">    |  7788 | SCOTT | 3000.00 |</span><br><span class="line">    |  7902 | FORD  | 3000.00 |</span><br><span class="line">    +-------+-------+---------+</span><br><span class="line">  第二种方式：between … and …</span><br><span class="line">    select </span><br><span class="line">      empno,ename,sal </span><br><span class="line">    from </span><br><span class="line">      emp </span><br><span class="line">    where </span><br><span class="line">      sal between 2450 and 3000;</span><br><span class="line">    </span><br><span class="line">    注意：</span><br><span class="line">      使用between and的时候，必须遵循左小右大。</span><br><span class="line">      between and是闭区间，包括两端的值。</span><br><span class="line"></span><br><span class="line">is null 为 null（is not null 不为空）</span><br><span class="line">注意：在数据库当中null不能使用等号进行衡量。需要使用is null因为数据库中的null代表什么也没有，它不是一个值，所以不能使用等号衡量。</span><br><span class="line"></span><br><span class="line">and 并且 </span><br><span class="line"></span><br><span class="line">or 或者</span><br><span class="line"></span><br><span class="line">and和or同时出现的话，有优先级问题吗？</span><br><span class="line">and和or同时出现，and优先级较高。如果想让or先执行，需要加“小括号”.以后在开发中，如果不确定优先级，就加小括号就行了。</span><br><span class="line"></span><br><span class="line">in 包含，相当于多个 or （not in 不在这个范围中）</span><br><span class="line"></span><br><span class="line">not 可以取非，主要用在 is 或 in 中</span><br><span class="line"></span><br><span class="line">like 称为模糊查询，支持%或下划线匹配</span><br><span class="line"># %匹配任意多个字符</span><br><span class="line"># 下划线：任意一个字符。</span><br><span class="line">#（%是一个特殊的符号，_ 也是一个特殊符号）</span><br><span class="line"></span><br><span class="line">找出名字以T结尾的？</span><br><span class="line">  select ename from emp where ename like &#x27;%T&#x27;;</span><br><span class="line">  </span><br><span class="line">找出名字以K开始的？</span><br><span class="line">  select ename from emp where ename like &#x27;K%&#x27;;</span><br><span class="line"></span><br><span class="line">找出第二个字每是A的？</span><br><span class="line">  select ename from emp where ename like &#x27;_A%&#x27;;</span><br><span class="line"></span><br><span class="line">找出第三个字母是R的？</span><br><span class="line">  select ename from emp where ename like &#x27;__R%&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><blockquote>
<p>什么是分组查询？</p>
</blockquote>
<ul>
<li>在实际的应用中，可能有这样的需求，需要先进行分组，然后对每一组的数据进行操作，这个时候我们需要使用分组查询。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">	select</span><br><span class="line">      ...</span><br><span class="line">    from</span><br><span class="line">      ...</span><br><span class="line">    group by</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">select ename,job,sum(sal) from emp group by job;</span><br><span class="line">    +-------+-----------+----------+</span><br><span class="line">    | ename | job       | sum(sal) |</span><br><span class="line">    +-------+-----------+----------+</span><br><span class="line">    | SCOTT | ANALYST   |  6000.00 |</span><br><span class="line">    | SMITH | CLERK     |  4150.00 |</span><br><span class="line">    | JONES | MANAGER   |  8275.00 |</span><br><span class="line">    | KING  | PRESIDENT |  5000.00 |</span><br><span class="line">    | ALLEN | SALESMAN  |  5600.00 |</span><br><span class="line">    +-------+-----------+----------+</span><br><span class="line">以上语句在mysql中可以执行，但select后面添加ename字段没有意义。</span><br><span class="line">以上语句在oracle中执行报错。</span><br><span class="line">oracle的语法比mysql的语法严格。（mysql的语法相对来说松散一些！）</span><br><span class="line"></span><br><span class="line">重点结论：在一条select语句当中，如果有group by语句的话，select后面只能跟：参加分组的字段，以及分组函数。其它的一律不能跟。</span><br><span class="line"></span><br><span class="line">找出“每个部门，不同工作岗位”的最高薪资？</span><br><span class="line">select </span><br><span class="line">  deptno, job, max(sal)</span><br><span class="line">from</span><br><span class="line">  emp</span><br><span class="line">group by</span><br><span class="line">  deptno, job;</span><br><span class="line">技巧：两个字段联合成1个字段看。（两个字段联合分组）</span><br><span class="line"></span><br><span class="line">使用having可以对分完组之后的数据进一步过滤。</span><br><span class="line">having不能单独使用，having不能代替where，having必须和group by联合使用。</span><br><span class="line"></span><br><span class="line">where和having，优先选择where，where实在完成不了了，再选择having。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充一点</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将之前的关键字全部组合在一起，来看一下他们的执行顺序？</span><br><span class="line">    select</span><br><span class="line">      	...</span><br><span class="line">    from</span><br><span class="line">     	...</span><br><span class="line">    where</span><br><span class="line">    	...</span><br><span class="line">    group by</span><br><span class="line">     	 ...</span><br><span class="line">	having</span><br><span class="line">		...</span><br><span class="line">    order by</span><br><span class="line">     	...</span><br><span class="line">以上关键字的顺序不能颠倒，需要记忆。</span><br><span class="line">执行顺序是什么？</span><br><span class="line">  1. from</span><br><span class="line">  2. where</span><br><span class="line">  3. group by</span><br><span class="line">  4. having</span><br><span class="line">  5. select</span><br><span class="line">  6. order by</span><br></pre></td></tr></table></figure>



<h1 id="排序：order-by"><a href="#排序：order-by" class="headerlink" title="排序：order by"></a>排序：order by</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">	select </span><br><span class="line">		ename,sal</span><br><span class="line">	from</span><br><span class="line">		emp</span><br><span class="line">	order by</span><br><span class="line">		sal; // 默认是升序！！</span><br><span class="line">指定降序： desc</span><br><span class="line">指定升序： asc</span><br><span class="line"></span><br><span class="line">以两个字段排序吗？或者说按照多个字段排序？</span><br><span class="line">查询员工名字和薪资，要求按照薪资升序，如果薪资一样的话，再按照名字升序排列。</span><br><span class="line">select </span><br><span class="line">	ename,sal</span><br><span class="line">from</span><br><span class="line">	emp</span><br><span class="line">order by</span><br><span class="line">	sal asc, ename asc; // sal在前，起主导，只有sal相等的时候，才会考虑启用ename排序。</span><br></pre></td></tr></table></figure>

<h1 id="数据处理函数"><a href="#数据处理函数" class="headerlink" title="数据处理函数"></a>数据处理函数</h1><ul>
<li>数据处理函数又被称为单行处理函数</li>
</ul>
<h3 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单行处理函数的特点：一个输入对应一个输出。</span><br><span class="line">单行处理函数常见:</span><br><span class="line">lower 转换小写</span><br><span class="line">	mysql&gt; select lower(ename) as ename from emp;</span><br><span class="line">	</span><br><span class="line">upper 转换大写</span><br><span class="line">	mysql&gt; select upper(name) as name from t_student;</span><br><span class="line">	</span><br><span class="line">substr 取子串（substr(被截取的字符串, 起始下标,截取的长度)）</span><br><span class="line">	mysql&gt; select substr(ename, 1, 1) as ename from emp;</span><br><span class="line">	</span><br><span class="line">concat函数进行字符串的拼接</span><br><span class="line">	mysql&gt; select concat(empno,ename) from emp;</span><br><span class="line">length 取长度</span><br><span class="line">	mysql&gt; select length(ename) enamelength from emp;</span><br><span class="line">	</span><br><span class="line">trim 去空格</span><br><span class="line">	mysql&gt;	select * from emp where ename = trim(&#x27;   KING&#x27;);</span><br><span class="line">	</span><br><span class="line">str_to_date 将字符串转换成日期</span><br><span class="line"></span><br><span class="line">date_format 格式化日期</span><br><span class="line">	</span><br><span class="line">format 设置千分位</span><br><span class="line">	</span><br><span class="line">case..when..then..when..then..else..end</span><br><span class="line">当员工的工作岗位是MANAGER的时候，工资上调10%，当工作岗位是SALESMAN的时候，工资上调50%,其它正常。	（注意：不修改数据库，只是将查询结果显示为工资上调）</span><br><span class="line">select </span><br><span class="line">  ename,job, sal as oldsal,</span><br><span class="line">  (case job when &#x27;MANAGER&#x27; then sal*1.1 when &#x27;SALESMAN&#x27; then sal*1.5 else sal end) as newsal </span><br><span class="line">from </span><br><span class="line">  emp;</span><br><span class="line"></span><br><span class="line">round 四舍五入</span><br><span class="line">mysql&gt; select round(1236.567, 0) as result from emp; //保留整数位。</span><br><span class="line">mysql&gt; select round(1236.567, 1) as result from emp; //保留1个小数</span><br><span class="line">mysql&gt; select round(1236.567, 2) as result from emp; //保留2个小数</span><br><span class="line">mysql&gt; select round(1236.567, -1) as result from emp; // 保留到十位。</span><br><span class="line"></span><br><span class="line">rand() 生成随机数</span><br><span class="line">  mysql&gt; select round(rand()*100,0) from emp; // 100以内的随机数</span><br><span class="line"></span><br><span class="line">ifnull 可以将 null 转换成一个具体值</span><br><span class="line">ifnull是空处理函数。专门处理空的。在所有数据库当中，只要有NULL参与的数学运算，最终结果就是NULL。</span><br><span class="line">注意：NULL只要参与运算，最终结果一定是NULL。为了避免这个现象，需要使用ifnull函数。ifnull函数用法：ifnull(数据, 被当做哪个值)。如果“数据”为NULL的时候，把这个数据结构当做哪个值。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="分组函数（多行处理函数）"><a href="#分组函数（多行处理函数）" class="headerlink" title="分组函数（多行处理函数）"></a>分组函数（多行处理函数）</h3><p>多行处理函数特点：多个输入，对应1个输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count	# 计数</span><br><span class="line">sum		# 求和</span><br><span class="line">avg		# 平均值</span><br><span class="line">max		# 最大值</span><br><span class="line">min		# 最小值</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">	1. 分组函数在使用的时候必须先进行分组，然后才能用。如果你没有对数据进行分组，整张表默认为一组。</span><br><span class="line">	2. 分组函数自动忽略NULL，你不需要提前对NULL进行处理。</span><br><span class="line">	3. 分组函数中count(*)和count(具体字段)有什么区别？</span><br><span class="line">		count(具体字段)：表示统计该字段下所有不为NULL的元素的总数。</span><br><span class="line">		count(*)：统计表当中的总行数。（只要有一行数据count则++）</span><br><span class="line">      	因为每一行记录不可能都为NULL，一行数据中有一列不为NULL，则这行数据就是有效的。</span><br><span class="line">    4. 分组函数不能够直接使用在where子句中。</span><br><span class="line">    5. 所有的分组函数可以组合起来一起用。</span><br></pre></td></tr></table></figure>

<h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><blockquote>
<p>把查询结果去除重复记录 <strong>distinct</strong> </p>
</blockquote>
<p>注意：原表数据不会被修改，只是查询结果去重。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// distinct只能出现在所有字段的最前方。</span><br><span class="line">mysql&gt; select distinct job from emp;</span><br><span class="line"></span><br><span class="line">// distinct出现在job,deptno两个字段之前，表示两个字段联合起来去重。</span><br><span class="line">mysql&gt; select distinct job,deptno from emp;</span><br></pre></td></tr></table></figure>

<h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><blockquote>
<p>多张表联合起来查询数据，被称为连接查询。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据表连接的方式分类：</span><br><span class="line">内连接： 等值连接 非等值连接 自连接</span><br><span class="line"></span><br><span class="line">外连接： 左外连接（左连接）	右外连接（右连接）</span><br></pre></td></tr></table></figure>

<h2 id="内连接：等值连接"><a href="#内连接：等值连接" class="headerlink" title="内连接：等值连接"></a>内连接：等值连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL99语法：</span><br><span class="line">  select </span><br><span class="line">    ...</span><br><span class="line">  from</span><br><span class="line">    a</span><br><span class="line">  inner join</span><br><span class="line">    b</span><br><span class="line">  on</span><br><span class="line">    a和b的连接条件</span><br><span class="line">  where</span><br><span class="line">    筛选条件</span><br><span class="line"># inner可以省略（带着inner可读性更好！！！一眼就能看出来是内连接）</span><br></pre></td></tr></table></figure>

<h2 id="内连接：非等值连接"><a href="#内连接：非等值连接" class="headerlink" title="内连接：非等值连接"></a>内连接：非等值连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	e.ename, e.sal, s.grade</span><br><span class="line">from</span><br><span class="line">	emp e</span><br><span class="line">join</span><br><span class="line">	salgrade s</span><br><span class="line">on</span><br><span class="line">	e.sal between s.losal and s.hisal; // 条件不是一个等量关系，称为非等值连接。</span><br></pre></td></tr></table></figure>

<h2 id="内连接：自连接"><a href="#内连接：自连接" class="headerlink" title="内连接：自连接"></a>内连接：自连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	a.ename as &#x27;员工名&#x27;, b.ename as &#x27;领导名&#x27;</span><br><span class="line">from</span><br><span class="line">	emp a</span><br><span class="line">join</span><br><span class="line">	emp b</span><br><span class="line">on</span><br><span class="line">	a.mgr = b.empno; //员工的领导编号 = 领导的员工编号</span><br><span class="line">以上就是内连接中的：自连接，技巧：一张表看做两张表</span><br></pre></td></tr></table></figure>

<h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// outer是可以省略的，带着可读性强。</span><br><span class="line">select </span><br><span class="line">	e.ename,d.dname</span><br><span class="line">from</span><br><span class="line">	emp e </span><br><span class="line">right outer join </span><br><span class="line">	dept d</span><br><span class="line">on</span><br><span class="line">	e.deptno = d.deptno;</span><br><span class="line">	</span><br><span class="line">right代表什么：表示将join关键字右边的这张表看成主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表。在外连接当中，两张表连接，产生了主次关系。</span><br><span class="line"></span><br><span class="line">带有right的是右外连接，又叫做右连接。</span><br><span class="line">带有left的是左外连接，又叫做左连接。</span><br><span class="line">任何一个右连接都有左连接的写法。</span><br><span class="line">任何一个左连接都有右连接的写法。</span><br><span class="line"></span><br><span class="line">思考：外连接的查询结果条数一定是 &gt;= 内连接的查询结果条数？</span><br><span class="line">	正确。</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">三张表，四张表怎么连接？</span><br><span class="line">语法：</span><br><span class="line">  select </span><br><span class="line">    ...</span><br><span class="line">  from</span><br><span class="line">    a</span><br><span class="line">  join</span><br><span class="line">    b</span><br><span class="line">  on</span><br><span class="line">    a和b的连接条件</span><br><span class="line">  join</span><br><span class="line">    c</span><br><span class="line">  on</span><br><span class="line">    a和c的连接条件</span><br><span class="line">  right join</span><br><span class="line">    d</span><br><span class="line">  on</span><br><span class="line">    a和d的连接条件</span><br><span class="line">  </span><br><span class="line">  一条SQL中内连接和外连接可以混合。都可以出现！</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><blockquote>
<p>select语句中嵌套select语句，被嵌套的select语句称为子查询。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子查询都可以出现在哪里呢？</span><br><span class="line">select</span><br><span class="line">  ..(select).</span><br><span class="line">from</span><br><span class="line">  ..(select).</span><br><span class="line">where</span><br><span class="line">  ..(select).</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">where子句中的子查询:</span><br><span class="line"></span><br><span class="line">第一步：查询最低工资是多少</span><br><span class="line">  select min(sal) from emp;</span><br><span class="line">  +----------+</span><br><span class="line">  | min(sal) |</span><br><span class="line">  +----------+</span><br><span class="line">  |   800.00 |</span><br><span class="line">  +----------+</span><br><span class="line">第二步：找出&gt;800的</span><br><span class="line">  select ename,sal from emp where sal &gt; 800;</span><br><span class="line"></span><br><span class="line">第三步：合并</span><br><span class="line">  select ename,sal from emp where sal &gt; (select min(sal) from emp);</span><br><span class="line">  </span><br><span class="line">from子句中的子查询:</span><br><span class="line">	注意：from后面的子查询，可以将子查询的查询结果当做一张临时表。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select后面出现的子查询（这个内容不需要掌握，了解即可！！！）</span><br><span class="line">	注意：对于select后面的子查询来说，这个子查询只能一次返回1条结果</span><br></pre></td></tr></table></figure>

<h1 id="union合并"><a href="#union合并" class="headerlink" title="union合并"></a>union合并</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">案例：查询工作岗位是MANAGER和SALESMAN的员工？</span><br><span class="line">select ename,job from emp where job = &#x27;MANAGER&#x27; or job = &#x27;SALESMAN&#x27;;</span><br><span class="line">select ename,job from emp where job in(&#x27;MANAGER&#x27;,&#x27;SALESMAN&#x27;);</span><br><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br><span class="line"></span><br><span class="line">select ename,job from emp where job = &#x27;MANAGER&#x27;</span><br><span class="line">union</span><br><span class="line">select ename,job from emp where job = &#x27;SALESMAN&#x27;;</span><br><span class="line"></span><br><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br><span class="line">union的效率要高一些。对于表连接来说，每连接一次新表，</span><br><span class="line">则匹配的次数满足笛卡尔积，成倍的翻。。。</span><br><span class="line">但是union可以减少匹配的次数。在减少匹配次数的情况下，</span><br><span class="line">还可以完成两个结果集的拼接。</span><br><span class="line"></span><br><span class="line">a 连接 b 连接 c</span><br><span class="line">a 10条记录</span><br><span class="line">b 10条记录</span><br><span class="line">c 10条记录</span><br><span class="line">匹配次数是：1000</span><br><span class="line"></span><br><span class="line">a 连接 b一个结果：10 * 10 --&gt; 100次</span><br><span class="line">a 连接 c一个结果：10 * 10 --&gt; 100次</span><br><span class="line">使用union的话是：100次 + 100次 = 200次。（union把乘法变成了加法运算）</span><br><span class="line"></span><br><span class="line">union在使用的时候有注意事项吗？</span><br><span class="line"></span><br><span class="line">//错误的：union在进行结果集合并的时候，要求两个结果集的列数相同。</span><br><span class="line">select ename,job from emp where job = &#x27;MANAGER&#x27;</span><br><span class="line">union</span><br><span class="line">select ename from emp where job = &#x27;SALESMAN&#x27;;</span><br><span class="line"></span><br><span class="line">// MYSQL可以，oracle语法严格 ，不可以，报错。要求：结果集合并时列和列的数据类型也要一致。</span><br><span class="line">select ename,job from emp where job = &#x27;MANAGER&#x27;</span><br><span class="line">union</span><br><span class="line">select ename,sal from emp where job = &#x27;SALESMAN&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limit作用：将查询结果集的一部分取出来。通常使用在分页查询当中。</span><br><span class="line">百度默认：一页显示10条记录。</span><br><span class="line">分页的作用是为了提高用户的体验，因为一次全部都查出来，用户体验差。可以一页一页翻页看</span><br><span class="line"></span><br><span class="line">limit的使用</span><br><span class="line">完整用法：limit startIndex, length</span><br><span class="line">  startIndex是起始下标，length是长度。</span><br><span class="line">  起始下标从0开始。</span><br><span class="line"></span><br><span class="line">缺省用法：limit 5; 这是取前5</span><br><span class="line"></span><br><span class="line">注意：mysql当中limit在order by之后执行！！！！！！</span><br><span class="line"></span><br><span class="line">分页</span><br><span class="line">每页显示3条记录</span><br><span class="line">第1页：limit 0,3		[0 1 2]</span><br><span class="line">第2页：limit 3,3		[3 4 5]</span><br><span class="line">第3页：limit 6,3		[6 7 8]</span><br><span class="line">第4页：limit 9,3		[9 10 11]</span><br><span class="line"></span><br><span class="line">每页显示pageSize条记录</span><br><span class="line">第pageNo页：limit (pageNo - 1) * pageSize  , pageSize</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">  // 用户提交过来一个页码，以及每页显示的记录条数</span><br><span class="line">  int pageNo = 5; //第5页</span><br><span class="line">  int pageSize = 10; //每页显示10条</span><br><span class="line"></span><br><span class="line">  int startIndex = (pageNo - 1) * pageSize;</span><br><span class="line">  String sql = &quot;select ...limit &quot; + startIndex + &quot;, &quot; + pageSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">记公式：</span><br><span class="line">limit (pageNo-1)*pageSize , pageSize</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于DQL语句的大总结：</span><br><span class="line">select </span><br><span class="line">  ...</span><br><span class="line">from</span><br><span class="line">  ...</span><br><span class="line">where</span><br><span class="line">  ...</span><br><span class="line">group by</span><br><span class="line">  ...</span><br><span class="line">having</span><br><span class="line">  ...</span><br><span class="line">order by</span><br><span class="line">  ...</span><br><span class="line">limit</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">执行顺序？</span><br><span class="line">  1.from</span><br><span class="line">  2.where</span><br><span class="line">  3.group by</span><br><span class="line">  4.having</span><br><span class="line">  5.select</span><br><span class="line">  6.order by</span><br><span class="line">  7.limit..</span><br></pre></td></tr></table></figure>

<h1 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">建表的语法格式：(建表属于DDL语句，DDL包括：create drop alter)</span><br><span class="line">create table 表名(字段名1 数据类型, 字段名2 数据类型, 字段名3 数据类型);</span><br><span class="line"></span><br><span class="line">create table 表名(</span><br><span class="line">  字段名1 数据类型, </span><br><span class="line">  字段名2 数据类型, </span><br><span class="line">  字段名3 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">表名：建议以t_ 或者 tbl_开始，可读性强。见名知意。</span><br><span class="line">字段名：见名知意。</span><br><span class="line">表名和字段名都属于标识符。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关于mysql中的数据类型</span><br><span class="line">很多数据类型，我们只需要掌握一些常见的数据类型即可。</span><br><span class="line"></span><br><span class="line">  varchar(最长255)</span><br><span class="line">    可变长度的字符串</span><br><span class="line">    比较智能，节省空间。</span><br><span class="line">    会根据实际的数据长度动态分配空间。</span><br><span class="line"></span><br><span class="line">    优点：节省空间</span><br><span class="line">    缺点：需要动态分配空间，速度慢。</span><br><span class="line"></span><br><span class="line">  char(最长255)</span><br><span class="line">    定长字符串</span><br><span class="line">    不管实际的数据长度是多少。</span><br><span class="line">    分配固定长度的空间去存储数据。</span><br><span class="line">    使用不恰当的时候，可能会导致空间的浪费。</span><br><span class="line"></span><br><span class="line">    优点：不需要动态分配空间，速度快。</span><br><span class="line">    缺点：使用不当可能会导致空间的浪费。</span><br><span class="line"></span><br><span class="line">   varchar 和 char 我们应该怎么选择？</span><br><span class="line">      性别字段你选什么？因为性别是固定长度的字符串，所以选择char。</span><br><span class="line">      姓名字段你选什么？每一个人的名字长度不同，所以选择varchar。</span><br><span class="line"></span><br><span class="line">  int(最长11)</span><br><span class="line">    数字中的整数型。等同于java的int。</span><br><span class="line"></span><br><span class="line">  bigint</span><br><span class="line">    数字中的长整型。等同于java中的long。</span><br><span class="line"></span><br><span class="line">  float	</span><br><span class="line">    单精度浮点型数据</span><br><span class="line"></span><br><span class="line">  double</span><br><span class="line">    双精度浮点型数据</span><br><span class="line"></span><br><span class="line">  date</span><br><span class="line">    短日期类型</span><br><span class="line"></span><br><span class="line">  datetime</span><br><span class="line">    长日期类型</span><br><span class="line"></span><br><span class="line">  clob </span><br><span class="line">    字符大对象</span><br><span class="line">    最多可以存储4G的字符串。</span><br><span class="line">    比如：存储一篇文章，存储一个说明。</span><br><span class="line">    超过255个字符的都要采用CLOB字符大对象来存储。</span><br><span class="line">    Character Large OBject:CLOB</span><br><span class="line"></span><br><span class="line">  blob</span><br><span class="line">    二进制大对象</span><br><span class="line">    Binary Large OBject</span><br><span class="line">    专门用来存储图片、声音、视频等流媒体数据。</span><br><span class="line">    往BLOB类型的字段上插入数据的时候，例如插入一个图片、视频等，</span><br><span class="line">    你需要使用IO流才行。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">创建一个学生表？</span><br><span class="line">    学号、姓名、年龄、性别、邮箱地址</span><br><span class="line">    create table t_student(</span><br><span class="line">      no int,</span><br><span class="line">      name varchar(32),</span><br><span class="line">      sex char(1),</span><br><span class="line">      age int(3),</span><br><span class="line">      email varchar(255)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  删除表：</span><br><span class="line">  drop table t_student; // 当这张表不存在的时候会报错！</span><br><span class="line"></span><br><span class="line">  // 如果这张表存在的话，删除</span><br><span class="line">  drop table if exists t_student;</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="插入数据insert"><a href="#插入数据insert" class="headerlink" title="插入数据insert"></a>插入数据insert</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入数据insert （DML）</span><br><span class="line">	</span><br><span class="line">语法格式：</span><br><span class="line">  insert into 表名(字段名1,字段名2,字段名3...) values(值1,值2,值3);</span><br><span class="line"></span><br><span class="line">  注意：字段名和值要一一对应。什么是一一对应？</span><br><span class="line">    数量要对应。数据类型要对应。</span><br><span class="line">    </span><br><span class="line">insert语句中的“字段名”可以省略吗？可以</span><br><span class="line">  insert into t_student values(2); //错误的</span><br><span class="line"></span><br><span class="line">  // 注意：前面的字段名省略的话，等于都写上了！所以值也要都写上！</span><br><span class="line">  insert into t_student values(2, &#x27;lisi&#x27;, &#x27;f&#x27;, 20, &#x27;lisi@123.com&#x27;);</span><br><span class="line">  +------+------+------+------+--------------+</span><br><span class="line">  | no   | name | sex  | age  | email        |</span><br><span class="line">  +------+------+------+------+--------------+</span><br><span class="line">  |    1 | NULL | m    | NULL | NULL         |</span><br><span class="line">  |    2 | lisi | f    |   20 | lisi@123.com |</span><br><span class="line">  +------+------+------+------+--------------+</span><br><span class="line"></span><br><span class="line">一次可以插入多条记录：</span><br><span class="line">  insert into t_user(id,name,birth,create_time) values</span><br><span class="line">  (1,&#x27;zs&#x27;,&#x27;1980-10-11&#x27;,now()), </span><br><span class="line">  (2,&#x27;lisi&#x27;,&#x27;1981-10-11&#x27;,now()),</span><br><span class="line">  (3,&#x27;wangwu&#x27;,&#x27;1982-10-11&#x27;,now());</span><br><span class="line"></span><br><span class="line">  语法：insert into t_user(字段名1,字段名2) values(),(),(),();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert插入日期</span><br><span class="line">	数字格式化：format</span><br><span class="line">	</span><br><span class="line">	格式化数字：format(数字, &#x27;格式&#x27;)</span><br><span class="line">  select ename,format(sal, &#x27;$999,999&#x27;) as sal from emp;</span><br><span class="line"></span><br><span class="line">str_to_date：将字符串varchar类型转换成date类型</span><br><span class="line">date_format：将date类型转换成具有一定格式的varchar字符串类型。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">插入数据？</span><br><span class="line">insert into t_user(id,name,birth) values(1, &#x27;zhangsan&#x27;, &#x27;01-10-1990&#x27;); // 1990年10月1日</span><br><span class="line">出问题了：原因是类型不匹配。数据库birth是date类型，这里给了一个字符串varchar。</span><br><span class="line"></span><br><span class="line">怎么办？可以使用str_to_date函数进行类型转换。</span><br><span class="line">str_to_date函数可以将字符串转换成日期类型date？</span><br><span class="line">语法格式：</span><br><span class="line">  str_to_date(&#x27;字符串日期&#x27;, &#x27;日期格式&#x27;)</span><br><span class="line"></span><br><span class="line">mysql的日期格式：</span><br><span class="line">  %Y	年</span><br><span class="line">  %m    月</span><br><span class="line">  %d    日</span><br><span class="line">  %h	时</span><br><span class="line">  %i	分</span><br><span class="line">  %s	秒</span><br><span class="line"></span><br><span class="line">insert into t_user(id,name,birth) values(1, &#x27;zhangsan&#x27;, str_to_date(&#x27;01-10-1990&#x27;,&#x27;%d-%m-%Y&#x27;));</span><br><span class="line"></span><br><span class="line">str_to_date函数可以把字符串varchar转换成日期date类型数据，</span><br><span class="line">通常使用在插入insert方面，因为插入的时候需要一个日期类型的数据，</span><br><span class="line">需要通过该函数将字符串转换成date。</span><br><span class="line"></span><br><span class="line">如果你提供的日期字符串是这个格式，str_to_date函数就不需要了！！！</span><br><span class="line">  %Y-%m-%d</span><br><span class="line">insert into t_user(id,name,birth) values(2, &#x27;lisi&#x27;, &#x27;1990-10-01&#x27;);</span><br><span class="line"></span><br><span class="line">查询的时候可以以某个特定的日期格式展示吗？</span><br><span class="line">date_format</span><br><span class="line">这个函数可以将日期类型转换成特定格式的字符串。</span><br><span class="line"></span><br><span class="line">select id,name,date_format(birth, &#x27;%m/%d/%Y&#x27;) as birth from t_user;</span><br><span class="line">+------+----------+------------+</span><br><span class="line">| id   | name     | birth      |</span><br><span class="line">+------+----------+------------+</span><br><span class="line">|    1 | zhangsan | 10/01/1990 |</span><br><span class="line">|    2 | lisi     | 10/01/1990 |</span><br><span class="line">+------+----------+------------+</span><br><span class="line"></span><br><span class="line">date_format函数怎么用？</span><br><span class="line">  date_format(日期类型数据, &#x27;日期格式&#x27;)</span><br><span class="line">  这个函数通常使用在查询日期方面。设置展示的日期格式。</span><br><span class="line"></span><br><span class="line">mysql&gt; select id,name,birth from t_user;</span><br><span class="line">+------+----------+------------+</span><br><span class="line">| id   | name     | birth      |</span><br><span class="line">+------+----------+------------+</span><br><span class="line">|    1 | zhangsan | 1990-10-01 |</span><br><span class="line">|    2 | lisi     | 1990-10-01 |</span><br><span class="line">+------+----------+------------+</span><br><span class="line">以上的SQL语句实际上是进行了默认的日期格式化，</span><br><span class="line">自动将数据库中的date类型转换成varchar类型。</span><br><span class="line">并且采用的格式是mysql默认的日期格式：&#x27;%Y-%m-%d&#x27;</span><br><span class="line"></span><br><span class="line">select id,name,date_format(birth,&#x27;%Y/%m/%d&#x27;) as birth from t_user;</span><br><span class="line"></span><br><span class="line">java中的日期格式？</span><br><span class="line">  yyyy-MM-dd HH:mm:ss SSS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">date和datetime两个类型的区别？</span><br><span class="line">	date是短日期：只包括年月日信息。</span><br><span class="line">	datetime是长日期：包括年月日时分秒信息。</span><br><span class="line">	mysql短日期默认格式：%Y-%m-%d</span><br><span class="line">	mysql长日期默认格式：%Y-%m-%d %h:%i:%s</span><br></pre></td></tr></table></figure>

<h1 id="修改update"><a href="#修改update" class="headerlink" title="修改update"></a>修改update</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">update 表名 set 字段名1=值1,字段名2=值2,字段名3=值3... where 条件;</span><br><span class="line"></span><br><span class="line">注意：没有条件限制会导致所有数据全部更新。</span><br><span class="line"></span><br><span class="line">update t_user set name = &#x27;jack&#x27;, birth = &#x27;2000-10-11&#x27; where id = 2;</span><br><span class="line">+------+----------+------------+---------------------+</span><br><span class="line">| id   | name     | birth      | create_time         |</span><br><span class="line">+------+----------+------------+---------------------+</span><br><span class="line">|    1 | zhangsan | 1990-10-01 | 2020-03-18 15:49:50 |</span><br><span class="line">|    2 | jack     | 2000-10-11 | 2020-03-18 15:51:23 |</span><br><span class="line">+------+----------+------------+---------------------+</span><br><span class="line"></span><br><span class="line">update t_user set name = &#x27;jack&#x27;, birth = &#x27;2000-10-11&#x27;, create_time = now() where id = 2;</span><br><span class="line"></span><br><span class="line">更新所有？</span><br><span class="line">  update t_user set name = &#x27;abc&#x27;;</span><br></pre></td></tr></table></figure>

<h1 id="删除数据-delete"><a href="#删除数据-delete" class="headerlink" title="删除数据 delete"></a>删除数据 delete</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法格式？</span><br><span class="line">  delete from 表名 where 条件;</span><br><span class="line"></span><br><span class="line">注意：没有条件，整张表的数据会全部删除！</span><br><span class="line"></span><br><span class="line">delete from t_user where id = 2;</span><br><span class="line"></span><br><span class="line">insert into t_user(id) values(2);</span><br><span class="line"></span><br><span class="line">delete from t_user; // 删除所有！</span><br><span class="line"></span><br><span class="line">快速删除表中的数据？【truncate比较重要，必须掌握】</span><br><span class="line"></span><br><span class="line">//删除dept_bak表中的数据</span><br><span class="line">delete from dept_bak; //这种删除数据的方式比较慢。</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from dept_bak;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">delete语句删除数据的原理？（delete属于DML语句！！！）</span><br><span class="line">  表中的数据被删除了，但是这个数据在硬盘上的真实存储空间不会被释放！！！</span><br><span class="line">  这种删除缺点是：删除效率比较低。</span><br><span class="line">  这种删除优点是：支持回滚，后悔了可以再恢复数据！！！</span><br><span class="line"></span><br><span class="line">truncate语句删除数据的原理？</span><br><span class="line">  这种删除效率比较高，表被一次截断，物理删除。</span><br><span class="line">  这种删除缺点：不支持回滚。</span><br><span class="line">  这种删除优点：快速。</span><br><span class="line"></span><br><span class="line">用法：truncate table dept_bak; （这种操作属于DDL操作。）</span><br><span class="line"></span><br><span class="line">大表非常大，上亿条记录？？？？</span><br><span class="line">  删除的时候，使用delete，也许需要执行1个小时才能删除完！效率较低。</span><br><span class="line">  可以选择使用truncate删除表中的数据。只需要不到1秒钟的时间就删除结束。效率较高。</span><br><span class="line">  但是使用truncate之前，必须仔细询问客户是否真的要删除，并警告删除之后不可恢复！</span><br><span class="line"></span><br><span class="line">  truncate是删除表中的数据，表还在！</span><br><span class="line"></span><br><span class="line">删除表操作？</span><br><span class="line">  drop table 表名; // 这不是删除表中的数据，这是把表删除。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是约束？</span><br><span class="line">约束对应的英语单词： constraint</span><br><span class="line">在创建表的时候，我们可以给表中的字段加上一些约束，来保证这个表中数据的</span><br><span class="line">完整性、有效性！！！</span><br><span class="line"></span><br><span class="line">约束的作用就是为了保证：表中的数据有效！！</span><br><span class="line"></span><br><span class="line">约束包括哪些？</span><br><span class="line">非空约束：not null</span><br><span class="line">唯一性约束: unique</span><br><span class="line">主键约束: primary key （简称PK）</span><br><span class="line">外键约束：foreign key（简称FK）</span><br><span class="line">检查约束：check（mysql不支持，oracle支持）</span><br></pre></td></tr></table></figure>

<h2 id="非空约束：not-null"><a href="#非空约束：not-null" class="headerlink" title="非空约束：not null"></a>非空约束：not null</h2><blockquote>
<p>唯一性约束unique约束的字段不能重复，但是可以为NULL。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists t_vip;</span><br><span class="line">create table t_vip(</span><br><span class="line">  id int,</span><br><span class="line">  name varchar(255) not null  // not null只有列级约束，没有表级约束！</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="唯一性约束-unique"><a href="#唯一性约束-unique" class="headerlink" title="唯一性约束: unique"></a>唯一性约束: unique</h2><blockquote>
<p>唯一性约束unique约束的字段不能重复，但是可以为NULL。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">唯一性约束unique约束的字段不能重复，但是可以为NULL。</span><br><span class="line">drop table if exists t_vip;</span><br><span class="line">create table t_vip(</span><br><span class="line">  id int,</span><br><span class="line">  name varchar(255) unique,</span><br><span class="line">  email varchar(255)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">如何做到联合唯一约束</span><br><span class="line">drop table if exists t_vip;</span><br><span class="line">create table t_vip(</span><br><span class="line">  id int,</span><br><span class="line">  name varchar(255),</span><br><span class="line">  email varchar(255),</span><br><span class="line">  unique(name,email) // 约束没有添加在列的后面，这种约束被称为表级约束。</span><br><span class="line">);</span><br><span class="line">name和email两个字段联合起来唯一</span><br><span class="line">在mysql当中，如果一个字段同时被not null和unique约束的话，该字段自动变成主键字段。</span><br></pre></td></tr></table></figure>

<h2 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束: primary key"></a>主键约束: primary key</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主键约束的相关术语？</span><br><span class="line">  主键约束：就是一种约束。</span><br><span class="line">  主键字段：该字段上添加了主键约束，这样的字段叫做：主键字段</span><br><span class="line">  主键值：主键字段中的每一个值都叫做：主键值。</span><br><span class="line"></span><br><span class="line">什么是主键？有啥用？</span><br><span class="line">  主键值是每一行记录的唯一标识。</span><br><span class="line">  主键值是每一行记录的身份证号！！！</span><br><span class="line"></span><br><span class="line">记住：任何一张表都应该有主键，没有主键，表无效！！</span><br><span class="line"></span><br><span class="line">主键的特征：not null + unique（主键值不能是NULL，同时也不能重复！）</span><br><span class="line"></span><br><span class="line">怎么给一张表添加主键约束呢？</span><br><span class="line">  drop table if exists t_vip;</span><br><span class="line">  // 1个字段做主键，叫做：单一主键</span><br><span class="line">  create table t_vip(</span><br><span class="line">    id int primary key,  //列级约束</span><br><span class="line">    name varchar(255)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">表级约束主要是给多个字段联合起来添加约束？</span><br><span class="line">  drop table if exists t_vip;</span><br><span class="line">  // id和name联合起来做主键：复合主键！！！！</span><br><span class="line">  create table t_vip(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(255),</span><br><span class="line">    email varchar(255),</span><br><span class="line">    primary key(id,name)</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">在实际开发中不建议使用：复合主键。建议使用单一主键！</span><br><span class="line">因为主键值存在的意义就是这行记录的身份证号，只要意义达到即可，单一主键可以做到。</span><br><span class="line">复合主键比较复杂，不建议使用！！！</span><br><span class="line"></span><br><span class="line">主键值建议使用：</span><br><span class="line">  int</span><br><span class="line">  bigint</span><br><span class="line">  char</span><br><span class="line">  等类型。</span><br><span class="line"></span><br><span class="line">不建议使用：varchar来做主键。主键值一般都是数字，一般都是定长的！</span><br><span class="line"></span><br><span class="line">主键除了：单一主键和复合主键之外，还可以这样进行分类？</span><br><span class="line">  自然主键：主键值是一个自然数，和业务没关系。</span><br><span class="line">  业务主键：主键值和业务紧密关联，例如拿银行卡账号做主键值。这就是业务主键！</span><br><span class="line"></span><br><span class="line">在实际开发中使用业务主键多，还是使用自然主键多一些？</span><br><span class="line">  自然主键使用比较多，因为主键只要做到不重复就行，不需要有意义。</span><br><span class="line">  业务主键不好，因为主键一旦和业务挂钩，那么当业务发生变动的时候，</span><br><span class="line">  可能会影响到主键值，所以业务主键不建议使用。尽量使用自然主键。</span><br><span class="line">  </span><br><span class="line">在mysql当中，有一种机制，可以帮助我们自动维护一个主键值？</span><br><span class="line">		drop table if exists t_vip;</span><br><span class="line">		create table t_vip(</span><br><span class="line">			id int primary key auto_increment, //auto_increment表示自增，从1开始，以1递增！</span><br><span class="line">			name varchar(255)</span><br><span class="line">		);</span><br></pre></td></tr></table></figure>



<h2 id="外键约束：foreign-key"><a href="#外键约束：foreign-key" class="headerlink" title="外键约束：foreign key"></a>外键约束：foreign key</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">外键约束涉及到的相关术语：</span><br><span class="line">  外键约束：一种约束（ foreign key）</span><br><span class="line">  外键字段：该字段上添加了外键约束</span><br><span class="line">  外键值：外键字段当中的每一个值。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><blockquote>
<p>什么是存储引擎，有什么用呢？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存储引擎是MySQL中特有的一个术语，其它数据库中没有。（Oracle中有，但是不叫这个名字）</span><br><span class="line">存储引擎这个名字高端大气上档次。实际上存储引擎是一个表存储/组织数据的方式。</span><br><span class="line">不同的存储引擎，表存储数据的方式不同。</span><br><span class="line"></span><br><span class="line">怎么给表添加/指定“存储引擎”呢？</span><br><span class="line">show create table t_student;</span><br><span class="line"></span><br><span class="line">可以在建表的时候给表指定存储引擎。</span><br><span class="line">CREATE TABLE `t_student` (</span><br><span class="line">  `no` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `cno` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`no`),</span><br><span class="line">  KEY `cno` (`cno`),</span><br><span class="line">  CONSTRAINT `t_student_ibfk_1` FOREIGN KEY (`cno`) REFERENCES `t_class` (`classno`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">在建表的时候可以在最后小括号的&quot;)&quot;的右边使用：</span><br><span class="line">  ENGINE来指定存储引擎。</span><br><span class="line">  CHARSET来指定这张表的字符编码方式。</span><br><span class="line">	</span><br><span class="line">结论：</span><br><span class="line">  mysql默认的存储引擎是：InnoDB</span><br><span class="line">  mysql默认的字符编码方式是：utf8</span><br><span class="line">  </span><br><span class="line">怎么查看mysql支持哪些存储引擎呢？</span><br><span class="line">命令： show engines \G</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a>MyISAM存储引擎</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">它管理的表具有以下特征：</span><br><span class="line">  使用三个文件表示每个表：</span><br><span class="line">    格式文件 — 存储表结构的定义（mytable.frm）</span><br><span class="line">    数据文件 — 存储表行的内容（mytable.MYD）</span><br><span class="line">    索引文件 — 存储表上索引（mytable.MYI）：索引是一本书的目录，缩小扫描范围，提高查询效率的一种机制。</span><br><span class="line">  可被转换为压缩、只读表来节省空间</span><br><span class="line"></span><br><span class="line">  提示一下：</span><br><span class="line">    对于一张表来说，只要是主键，</span><br><span class="line">    或者加有unique约束的字段上会自动创建索引。</span><br><span class="line"></span><br><span class="line">  MyISAM存储引擎特点：</span><br><span class="line">    可被转换为压缩、只读表来节省空间</span><br><span class="line">    这是这种存储引擎的优势！！！！</span><br><span class="line">  </span><br><span class="line">  MyISAM不支持事务机制，安全性低。</span><br></pre></td></tr></table></figure>

<h2 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是mysql默认的存储引擎，同时也是一个重量级的存储引擎。</span><br><span class="line">InnoDB支持事务，支持数据库崩溃后自动恢复机制。</span><br><span class="line">InnoDB存储引擎最主要的特点是：非常安全。</span><br><span class="line"></span><br><span class="line">它管理的表具有下列主要特征：</span><br><span class="line">  – 每个 InnoDB 表在数据库目录中以.frm 格式文件表示</span><br><span class="line">  – InnoDB 表空间 tablespace 被用于存储表的内容（表空间是一个逻辑名称。表空间存储数据+索引。）</span><br><span class="line"></span><br><span class="line">  – 提供一组用来记录事务性活动的日志文件</span><br><span class="line">  – 用 COMMIT(提交)、SAVEPOINT 及ROLLBACK(回滚)支持事务处理</span><br><span class="line">  – 提供全 ACID 兼容</span><br><span class="line">  – 在 MySQL 服务器崩溃后提供自动恢复</span><br><span class="line">  – 多版本（MVCC）和行级锁定</span><br><span class="line">  – 支持外键及引用的完整性，包括级联删除和更新</span><br><span class="line"></span><br><span class="line">InnoDB最大的特点就是支持事务：</span><br><span class="line">  以保证数据的安全。效率不是很高，并且也不能压缩，不能转换为只读，</span><br><span class="line">  不能很好的节省存储空间。</span><br></pre></td></tr></table></figure>

<h2 id="MEMORY存储引擎"><a href="#MEMORY存储引擎" class="headerlink" title="MEMORY存储引擎"></a>MEMORY存储引擎</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 MEMORY 存储引擎的表，其数据存储在内存中，且行的长度固定，</span><br><span class="line">这两个特点使得 MEMORY 存储引擎非常快。</span><br><span class="line"></span><br><span class="line">MEMORY 存储引擎管理的表具有下列特征：</span><br><span class="line">  – 在数据库目录内，每个表均以.frm 格式的文件表示。</span><br><span class="line">  – 表数据及索引被存储在内存中。（目的就是快，查询快！）</span><br><span class="line">  – 表级锁机制。</span><br><span class="line">  – 不能包含 TEXT 或 BLOB 字段。</span><br><span class="line"></span><br><span class="line">MEMORY 存储引擎以前被称为HEAP 引擎。</span><br><span class="line"></span><br><span class="line">MEMORY引擎优点：查询效率是最高的。不需要和硬盘交互。</span><br><span class="line">MEMORY引擎缺点：不安全，关机之后数据消失。因为数据和索引都是在内存当中。</span><br></pre></td></tr></table></figure>

<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是事务？</span><br><span class="line"></span><br><span class="line">一个事务其实就是一个完整的业务逻辑。</span><br><span class="line">是一个最小的工作单元。不可再分。</span><br><span class="line"></span><br><span class="line">什么是一个完整的业务逻辑？</span><br><span class="line">  假设转账，从A账户向B账户中转账10000.</span><br><span class="line">  将A账户的钱减去10000（update语句）</span><br><span class="line">  将B账户的钱加上10000（update语句）</span><br><span class="line">  这就是一个完整的业务逻辑。</span><br><span class="line"></span><br><span class="line">  以上的操作是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。</span><br><span class="line">  这两个update语句要求必须同时成功或者同时失败，这样才能保证钱是正确的。</span><br><span class="line"></span><br><span class="line">只有DML语句才会有事务这一说，其它语句和事务无关！！！</span><br><span class="line">insert</span><br><span class="line">delete</span><br><span class="line">update</span><br><span class="line">只有以上的三个语句和事务有关系，其它都没有关系。</span><br><span class="line"></span><br><span class="line">因为 只有以上的三个语句是数据库表中数据进行增、删、改的。</span><br><span class="line">只要你的操作一旦涉及到数据的增、删、改，那么就一定要考虑安全问题。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">InnoDB存储引擎：提供一组用来记录事务性活动的日志文件</span><br><span class="line"></span><br><span class="line">事务开启了：</span><br><span class="line">insert</span><br><span class="line">insert</span><br><span class="line">insert</span><br><span class="line">delete</span><br><span class="line">update</span><br><span class="line">update</span><br><span class="line">update</span><br><span class="line">事务结束了！</span><br><span class="line"></span><br><span class="line">在事务的执行过程中，每一条DML的操作都会记录到“事务性活动的日志文件”中。</span><br><span class="line">在事务的执行过程中，我们可以提交事务，也可以回滚事务。</span><br><span class="line"></span><br><span class="line">提交事务？</span><br><span class="line">  清空事务性活动的日志文件，将数据全部彻底持久化到数据库表中。</span><br><span class="line">  提交事务标志着，事务的结束。并且是一种全部成功的结束。</span><br><span class="line"></span><br><span class="line">回滚事务？</span><br><span class="line">  将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件</span><br><span class="line">  回滚事务标志着，事务的结束。并且是一种全部失败的结束。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="提交事务、回滚事务"><a href="#提交事务、回滚事务" class="headerlink" title="提交事务、回滚事务"></a>提交事务、回滚事务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">提交事务：commit; 语句</span><br><span class="line">回滚事务：rollback; 语句（回滚永远都是只能回滚到上一次的提交点！）</span><br><span class="line"></span><br><span class="line">事务对应的英语单词是：transaction</span><br><span class="line"></span><br><span class="line">测试一下，在mysql当中默认的事务行为是怎样的？</span><br><span class="line">  mysql默认情况下是支持自动提交事务的。（自动提交）</span><br><span class="line">  什么是自动提交？</span><br><span class="line">    每执行一条DML语句，则提交一次！</span><br><span class="line"></span><br><span class="line">  这种自动提交实际上是不符合我们的开发习惯，因为一个业务</span><br><span class="line">  通常是需要多条DML语句共同执行才能完成的，为了保证数据</span><br><span class="line">  的安全，必须要求同时成功之后再提交，所以不能执行一条</span><br><span class="line">  就提交一条。</span><br><span class="line"></span><br><span class="line">怎么将mysql的自动提交机制关闭掉呢？</span><br><span class="line">  先执行这个命令：start transaction;</span><br></pre></td></tr></table></figure>

<p><strong>代码演示</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">演示事务：</span><br><span class="line">  ---------------------------------回滚事务----------------------------------------</span><br><span class="line">  mysql&gt; use bjpowernode;</span><br><span class="line">  Database changed</span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; start transaction;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; insert into dept_bak values(10,&#x27;abc&#x27;, &#x27;tj&#x27;);</span><br><span class="line">  Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; insert into dept_bak values(10,&#x27;abc&#x27;, &#x27;tj&#x27;);</span><br><span class="line">  Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  | DEPTNO | DNAME | LOC  |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  |     10 | abc   | tj   |</span><br><span class="line">  |     10 | abc   | tj   |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; rollback;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ---------------------------------提交事务----------------------------------------</span><br><span class="line">  mysql&gt; use bjpowernode;</span><br><span class="line">  Database changed</span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  | DEPTNO | DNAME | LOC  |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  |     10 | abc   | bj   |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; start transaction;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; insert into dept_bak values(20,&#x27;abc</span><br><span class="line">  Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; insert into dept_bak values(20,&#x27;abc</span><br><span class="line">  Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; insert into dept_bak values(20,&#x27;abc</span><br><span class="line">  Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; commit;</span><br><span class="line">  Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  | DEPTNO | DNAME | LOC  |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  |     10 | abc   | bj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; rollback;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  | DEPTNO | DNAME | LOC  |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  |     10 | abc   | bj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="事务四个特性"><a href="#事务四个特性" class="headerlink" title="事务四个特性"></a>事务四个特性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A：原子性</span><br><span class="line">  说明事务是最小的工作单元。不可再分。</span><br><span class="line"></span><br><span class="line">C：一致性</span><br><span class="line">  所有事务要求，在同一个事务当中，所有操作必须同时成功，或者同时失败，</span><br><span class="line">  以保证数据的一致性。</span><br><span class="line"></span><br><span class="line">I：隔离性</span><br><span class="line">  A事务和B事务之间具有一定的隔离。</span><br><span class="line">  教室A和教室B之间有一道墙，这道墙就是隔离性。</span><br><span class="line">  A事务在操作一张表的时候，另一个事务B也操作这张表会那样？？？</span><br><span class="line"></span><br><span class="line">D：持久性</span><br><span class="line">  事务最终结束的一个保障。事务提交，就相当于将没有保存到硬盘上的数据</span><br><span class="line">  保存到硬盘上！</span><br></pre></td></tr></table></figure>

<h2 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A教室和B教室中间有一道墙，这道墙可以很厚，也可以很薄。这就是事务的隔离级别。</span><br><span class="line">这道墙越厚，表示隔离级别就越高。</span><br><span class="line"></span><br><span class="line">事务和事务之间的隔离级别有哪些呢？4个级别</span><br><span class="line"></span><br><span class="line">读未提交：read uncommitted（最低的隔离级别）《没有提交就读到了》</span><br><span class="line">  什么是读未提交？</span><br><span class="line">    事务A可以读取到事务B未提交的数据。</span><br><span class="line">  这种隔离级别存在的问题就是：</span><br><span class="line">    脏读现象！(Dirty Read)</span><br><span class="line">    我们称读到了脏数据。</span><br><span class="line">  这种隔离级别一般都是理论上的，大多数的数据库隔离级别都是二档起步！</span><br><span class="line"></span><br><span class="line">读已提交：read committed《提交之后才能读到》</span><br><span class="line">  什么是读已提交？</span><br><span class="line">    事务A只能读取到事务B提交之后的数据。</span><br><span class="line">  这种隔离级别解决了什么问题？</span><br><span class="line">    解决了脏读的现象。</span><br><span class="line">  这种隔离级别存在什么问题？</span><br><span class="line">    不可重复读取数据。</span><br><span class="line">    什么是不可重复读取数据呢？</span><br><span class="line">      在事务开启之后，第一次读到的数据是3条，当前事务还没有</span><br><span class="line">      结束，可能第二次再读取的时候，读到的数据是4条，3不等于4</span><br><span class="line">      称为不可重复读取。</span><br><span class="line"></span><br><span class="line">  这种隔离级别是比较真实的数据，每一次读到的数据是绝对的真实。</span><br><span class="line">  oracle数据库默认的隔离级别是：read committed</span><br><span class="line"></span><br><span class="line">可重复读：repeatable read《提交之后也读不到，永远读取的都是刚开启事务时的数据》</span><br><span class="line">  什么是可重复读取？</span><br><span class="line">    事务A开启之后，不管是多久，每一次在事务A中读取到的数据</span><br><span class="line">    都是一致的。即使事务B将数据已经修改，并且提交了，事务A</span><br><span class="line">    读取到的数据还是没有发生改变，这就是可重复读。</span><br><span class="line">  可重复读解决了什么问题？</span><br><span class="line">    解决了不可重复读取数据。</span><br><span class="line">  可重复读存在的问题是什么？</span><br><span class="line">    可以会出现幻影读。</span><br><span class="line">    每一次读取到的数据都是幻象。不够真实！</span><br><span class="line">  </span><br><span class="line">  早晨9点开始开启了事务，只要事务不结束，到晚上9点，读到的数据还是那样！</span><br><span class="line">  读到的是假象。不够绝对的真实。</span><br><span class="line"></span><br><span class="line">  mysql中默认的事务隔离级别就是这个！！！！！！！！！！！</span><br><span class="line"></span><br><span class="line">序列化/串行化：serializable（最高的隔离级别）</span><br><span class="line">  这是最高隔离级别，效率最低。解决了所有的问题。</span><br><span class="line">  这种隔离级别表示事务排队，不能并发！</span><br><span class="line">  synchronized，线程同步（事务同步）</span><br><span class="line">  每一次读取到的数据都是最真实的，并且效率是最低的。</span><br><span class="line"></span><br><span class="line">查看隔离级别：SELECT @@tx_isolation</span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">mysql默认的隔离级别</span><br></pre></td></tr></table></figure>

<h1 id="索引（index）"><a href="#索引（index）" class="headerlink" title="索引（index）"></a>索引（index）</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是索引？</span><br><span class="line">索引是在数据库表的字段上添加的，是为了提高查询效率存在的一种机制。</span><br><span class="line">一张表的一个字段可以添加一个索引，当然，多个字段联合起来也可以添加索引。</span><br><span class="line">索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。</span><br><span class="line"></span><br><span class="line">对于一本字典来说，查找某个汉字有两种方式：</span><br><span class="line">  第一种方式：一页一页挨着找，直到找到为止，这种查找方式属于全字典扫描。</span><br><span class="line">  效率比较低。</span><br><span class="line">  第二种方式：先通过目录（索引）去定位一个大概的位置，然后直接定位到这个</span><br><span class="line">  位置，做局域性扫描，缩小扫描的范围，快速的查找。这种查找方式属于通过</span><br><span class="line">  索引检索，效率较高。</span><br><span class="line">  </span><br><span class="line">select * from t_user where name = &#x27;jack&#x27;;</span><br><span class="line"></span><br><span class="line">以上的这条SQL语句会去name字段上扫描，为什么？</span><br><span class="line">  因为查询条件是：name=&#x27;jack&#x27;</span><br><span class="line"></span><br><span class="line">如果name字段上没有添加索引（目录），或者说没有给name字段创建索引，</span><br><span class="line">MySQL会进行全扫描，会将name字段上的每一个值都比对一遍。效率比较低。</span><br><span class="line"></span><br><span class="line">MySQL在查询方面主要就是两种方式：</span><br><span class="line">  第一种方式：全表扫描</span><br><span class="line">  第二种方式：根据索引检索。</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">  在实际中，汉语字典前面的目录是排序的，按照a b c d e f....排序，</span><br><span class="line">  为什么排序呢？因为只有排序了才会有区间查找这一说！（缩小扫描范围</span><br><span class="line">  其实就是扫描某个区间罢了！）</span><br><span class="line"></span><br><span class="line">  在mysql数据库当中索引也是需要排序的，并且这个所以的排序和TreeSet</span><br><span class="line">  数据结构相同。TreeSet（TreeMap）底层是一个自平衡的二叉树！在mysql</span><br><span class="line">  当中索引是一个B-Tree数据结构。</span><br><span class="line"></span><br><span class="line">  遵循左小又大原则存放。采用中序遍历方式遍历取数据。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设有一张用户表：t_user</span><br><span class="line"></span><br><span class="line">id(PK)					name						每一行记录在硬盘上都有物理存储编号</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">100						zhangsan					0x1111</span><br><span class="line">120						lisi						0x2222</span><br><span class="line">99							wangwu					0x8888</span><br><span class="line">88							zhaoliu					0x9999</span><br><span class="line">101						jack						0x6666</span><br><span class="line">55							lucy						0x5555</span><br><span class="line">130						tom						0x7777</span><br><span class="line"></span><br><span class="line">提醒1：在任何数据库当中主键上都会自动添加索引对象，id字段上自动有索引，</span><br><span class="line">因为id是PK。另外在mysql当中，一个字段上如果有unique约束的话，也会自动</span><br><span class="line">创建索引对象。</span><br><span class="line"></span><br><span class="line">提醒2：在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有</span><br><span class="line">一个硬盘的物理存储编号。</span><br><span class="line"></span><br><span class="line">提醒3：在mysql当中，索引是一个单独的对象，不同的存储引擎以不同的形式</span><br><span class="line">存在，在MyISAM存储引擎中，索引存储在一个.MYI文件中。在InnoDB存储引擎中</span><br><span class="line">索引存储在一个逻辑名称叫做tablespace的当中。在MEMORY存储引擎当中索引</span><br><span class="line">被存储在内存当中。不管索引存储在哪里，索引在mysql当中都是一个树的形式</span><br><span class="line">存在。（自平衡二叉树：B-Tree）</span><br></pre></td></tr></table></figure>

<h2 id="添加索引的条件"><a href="#添加索引的条件" class="headerlink" title="添加索引的条件"></a>添加索引的条件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么条件下，我们会考虑给字段添加索引呢？</span><br><span class="line">条件1：数据量庞大（到底有多么庞大算庞大，这个需要测试，因为每一个硬件环境不同）</span><br><span class="line">条件2：该字段经常出现在where的后面，以条件的形式存在，也就是说这个字段总是被扫描。</span><br><span class="line">条件3：该字段很少的DML(insert delete update)操作。（因为DML之后，索引需要重新排序。）</span><br><span class="line"></span><br><span class="line">建议不要随意添加索引，因为索引也是需要维护的，太多的话反而会降低系统的性能。</span><br><span class="line">建议通过主键查询，建议通过unique约束的字段进行查询，效率是比较高的。</span><br></pre></td></tr></table></figure>

<h2 id="索引的创建和删除"><a href="#索引的创建和删除" class="headerlink" title="索引的创建和删除"></a>索引的创建和删除</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建索引：</span><br><span class="line">  mysql&gt; create index emp_ename_index on emp(ename);</span><br><span class="line">  给emp表的ename字段添加索引，起名：emp_ename_index</span><br><span class="line"></span><br><span class="line">删除索引：</span><br><span class="line">  mysql&gt; drop index emp_ename_index on emp;</span><br><span class="line">  将emp表上的emp_ename_index索引对象删除。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="是否使用索引进行检索"><a href="#是否使用索引进行检索" class="headerlink" title="是否使用索引进行检索"></a>是否使用索引进行检索</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.5、在mysql当中，怎么查看一个SQL语句是否使用了索引进行检索？</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from emp where ename = &#x27;KING&#x27;;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">扫描14条记录：说明没有使用索引。type=ALL</span><br><span class="line"></span><br><span class="line">mysql&gt; create index emp_ename_index on emp(ename);</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from emp where ename = &#x27;KING&#x27;;</span><br><span class="line">+----+-------------+-------+------+-----------------+-----------------+---------+-------+------+-------------+</span><br><span class="line">| id | select_type | table | type | possible_keys   | key             | key_len | ref   | rows | Extra       |</span><br><span class="line">+----+-------------+-------+------+-----------------+-----------------+---------+-------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | emp   | ref  | emp_ename_index | emp_ename_index | 33      | const |    1 | Using where |</span><br><span class="line">+----+-------------+-------+------+-----------------+-----------------+---------+-------+------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">索引有失效的时候，什么时候索引失效呢？</span><br><span class="line"></span><br><span class="line">失效的第1种情况：</span><br><span class="line">  select * from emp where ename like &#x27;%T&#x27;;</span><br><span class="line"></span><br><span class="line">  ename上即使添加了索引，也不会走索引，为什么？</span><br><span class="line">    原因是因为模糊匹配当中以“%”开头了！</span><br><span class="line">    尽量避免模糊查询的时候以“%”开始。</span><br><span class="line">    这是一种优化的手段/策略。</span><br><span class="line"></span><br><span class="line">  mysql&gt; explain select * from emp where ename like &#x27;%T&#x27;;</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line"></span><br><span class="line">失效的第2种情况：</span><br><span class="line">  使用or的时候会失效，如果使用or那么要求or两边的条件字段都要有</span><br><span class="line">  索引，才会走索引，如果其中一边有一个字段没有索引，那么另一个</span><br><span class="line">  字段上的索引也会实现。所以这就是为什么不建议使用or的原因。</span><br><span class="line"></span><br><span class="line">  mysql&gt; explain select * from emp where ename = &#x27;KING&#x27; or job = &#x27;MANAGER&#x27;;</span><br><span class="line">  +----+-------------+-------+------+-----------------+------+---------+------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys   | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+-----------------+------+---------+------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ALL  | emp_ename_index | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">  +----+-------------+-------+------+-----------------+------+---------+------+------+-------------+</span><br><span class="line"></span><br><span class="line">失效的第3种情况：</span><br><span class="line">  使用复合索引的时候，没有使用左侧的列查找，索引失效</span><br><span class="line">  什么是复合索引？</span><br><span class="line">    两个字段，或者更多的字段联合起来添加一个索引，叫做复合索引。</span><br><span class="line">  </span><br><span class="line">  create index emp_job_sal_index on emp(job,sal);</span><br><span class="line">  </span><br><span class="line">  mysql&gt; explain select * from emp where job = &#x27;MANAGER&#x27;;</span><br><span class="line">  +----+-------------+-------+------+-------------------+-------------------+---------+-------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys     | key               | key_len | ref   | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+-------------------+-------------------+---------+-------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ref  | emp_job_sal_index | emp_job_sal_index | 30      | const |    3 | Using where |</span><br><span class="line">  +----+-------------+-------+------+-------------------+-------------------+---------+-------+------+-------------+</span><br><span class="line">  </span><br><span class="line">  mysql&gt; explain select * from emp where sal = 800;</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line"></span><br><span class="line">失效的第4种情况：</span><br><span class="line">  在where当中索引列参加了运算，索引失效。</span><br><span class="line">  mysql&gt; create index emp_sal_index on emp(sal);</span><br><span class="line"></span><br><span class="line">  explain select * from emp where sal = 800;</span><br><span class="line">  +----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys | key           | key_len | ref   | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ref  | emp_sal_index | emp_sal_index | 9       | const |    1 | Using where |</span><br><span class="line">  +----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+</span><br><span class="line"></span><br><span class="line">  mysql&gt; explain select * from emp where sal+1 = 800;</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line"></span><br><span class="line">失效的第5种情况：</span><br><span class="line">  在where当中索引列使用了函数</span><br><span class="line">  explain select * from emp where lower(ename) = &#x27;smith&#x27;;</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单一索引：一个字段上添加索引。</span><br><span class="line">复合索引：两个字段或者更多的字段上添加索引。</span><br><span class="line"></span><br><span class="line">主键索引：主键上添加索引。</span><br><span class="line">唯一性索引：具有unique约束的字段上添加索引。</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">注意：唯一性比较弱的字段上添加索引用处不大。</span><br></pre></td></tr></table></figure>

<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><blockquote>
<p>什么是视图？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">视图：站在不同的角度去看待同一份数据。</span><br></pre></td></tr></table></figure>

<h2 id="视图创建和删除"><a href="#视图创建和删除" class="headerlink" title="视图创建和删除"></a>视图创建和删除</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建视图对象：</span><br><span class="line">  create view dept2_view as select * from dept2;</span><br><span class="line"></span><br><span class="line">删除视图对象：</span><br><span class="line">  drop view dept2_view;</span><br><span class="line"></span><br><span class="line">注意：只有DQL语句才能以view的形式创建。</span><br><span class="line">  create view view_name as 这里的语句必须是DQL语句;</span><br></pre></td></tr></table></figure>

<h2 id="视图的用途"><a href="#视图的用途" class="headerlink" title="视图的用途"></a>视图的用途</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">《方便，简化开发，利于维护》</span><br><span class="line">我们可以面向视图对象进行增删改查，对视图对象的增删改查，会导致</span><br><span class="line">原表被操作！（视图的特点：通过对视图的操作，会影响到原表数据。）</span><br><span class="line"></span><br><span class="line">//面向视图查询</span><br><span class="line">select * from dept2_view; </span><br><span class="line"></span><br><span class="line">// 面向视图插入</span><br><span class="line">insert into dept2_view(deptno,dname,loc) values(60,&#x27;SALES&#x27;, &#x27;BEIJING&#x27;);</span><br><span class="line"></span><br><span class="line">// 查询原表数据</span><br><span class="line">mysql&gt; select * from dept2;</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">|     60 | SALES      | BEIJING  |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line"></span><br><span class="line">// 面向视图删除</span><br><span class="line">mysql&gt; delete from dept2_view;</span><br><span class="line"></span><br><span class="line">// 查询原表数据</span><br><span class="line">mysql&gt; select * from dept2;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">假设有一条非常复杂的SQL语句，而这条SQL语句需要在不同的位置上反复使用。</span><br><span class="line">每一次使用这个sql语句的时候都需要重新编写，很长，很麻烦，怎么办？</span><br><span class="line">  可以把这条复杂的SQL语句以视图对象的形式新建。</span><br><span class="line">  在需要编写这条SQL语句的位置直接使用视图对象，可以大大简化开发。</span><br><span class="line">  并且利于后期的维护，因为修改的时候也只需要修改一个位置就行，只需要</span><br><span class="line">  修改视图对象所映射的SQL语句。</span><br><span class="line"></span><br><span class="line">我们以后面向视图开发的时候，使用视图的时候可以像使用table一样。</span><br><span class="line">可以对视图进行增删改查等操作。视图不是在内存当中，视图对象也是</span><br><span class="line">存储在硬盘上的，不会消失。</span><br><span class="line"></span><br><span class="line">再提醒一下：</span><br><span class="line">  视图对应的语句只能是DQL语句。</span><br><span class="line">  但是视图对象创建完成之后，可以对视图进行增删改查等操作。</span><br><span class="line"></span><br><span class="line">小插曲：</span><br><span class="line">  增删改查，又叫做：CRUD。</span><br><span class="line">  CRUD是在公司中程序员之间沟通的术语。一般我们很少说增删改查。</span><br><span class="line">  一般都说CRUD。</span><br><span class="line"></span><br><span class="line">  C:Create（增）</span><br><span class="line">  R:Retrive（查：检索）</span><br><span class="line">  U:Update（改）</span><br><span class="line">  D:Delete（删）</span><br></pre></td></tr></table></figure>

<h1 id="DBA常用命令"><a href="#DBA常用命令" class="headerlink" title="DBA常用命令"></a>DBA常用命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重点掌握：</span><br><span class="line">  数据的导入和导出（数据的备份）</span><br><span class="line">  其它命令了解一下即可。</span><br><span class="line"></span><br><span class="line">数据导出？</span><br><span class="line">  注意：在windows的dos命令窗口中：</span><br><span class="line">    mysqldump bjpowernode&gt;D:\bjpowernode.sql -uroot -p123456</span><br><span class="line">  </span><br><span class="line">  可以导出指定的表吗？</span><br><span class="line">    mysqldump bjpowernode emp&gt;D:\bjpowernode.sql -uroot -p123456</span><br><span class="line"></span><br><span class="line">数据导入？</span><br><span class="line">  注意：需要先登录到mysql数据库服务器上。</span><br><span class="line">  然后创建数据库：create database bjpowernode;</span><br><span class="line">  使用数据库：use bjpowernode</span><br><span class="line">  然后初始化数据库：source D:\bjpowernode.sql</span><br></pre></td></tr></table></figure>

<h1 id="数据库设计三范式"><a href="#数据库设计三范式" class="headerlink" title="数据库设计三范式"></a>数据库设计三范式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是数据库设计范式？</span><br><span class="line">数据库表的设计依据。教你怎么进行数据库表的设计。</span><br><span class="line"></span><br><span class="line">数据库设计范式共有？</span><br><span class="line">3个。</span><br><span class="line">第一范式：要求任何一张表必须有主键，每一个字段原子性不可再分。</span><br><span class="line"></span><br><span class="line">第二范式：建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，</span><br><span class="line">不要产生部分依赖。</span><br><span class="line"></span><br><span class="line">第三范式：建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，</span><br><span class="line">不要产生传递依赖。</span><br><span class="line"></span><br><span class="line">声明：三范式是面试官经常问的，所以一定要熟记在心！</span><br><span class="line"></span><br><span class="line">设计数据库表的时候，按照以上的范式进行，可以避免表中数据的冗余，空间的浪费。</span><br><span class="line"></span><br><span class="line">第一范式</span><br><span class="line">最核心，最重要的范式，所有表的设计都需要满足。</span><br><span class="line">必须有主键，并且每一个字段都是原子性不可再分。</span><br><span class="line"></span><br><span class="line">学生编号 学生姓名 联系方式</span><br><span class="line">------------------------------------------</span><br><span class="line">1001		张三		zs@gmail.com,1359999999</span><br><span class="line">1002		李四		ls@gmail.com,13699999999</span><br><span class="line">1001		王五		ww@163.net,13488888888</span><br><span class="line"></span><br><span class="line">以上是学生表，满足第一范式吗？</span><br><span class="line">  不满足，第一：没有主键。第二：联系方式可以分为邮箱地址和电话</span><br><span class="line"></span><br><span class="line">学生编号(pk) 学生姓名	邮箱地址			联系电话</span><br><span class="line">----------------------------------------------------</span><br><span class="line">1001				张三		zs@gmail.com	1359999999</span><br><span class="line">1002				李四		ls@gmail.com	13699999999</span><br><span class="line">1003				王五		ww@163.net		13488888888</span><br><span class="line"></span><br><span class="line">第二范式：</span><br><span class="line">建立在第一范式的基础之上，</span><br><span class="line">要求所有非主键字段必须完全依赖主键，不要产生部分依赖。</span><br><span class="line"></span><br><span class="line">学生编号 学生姓名 教师编号 教师姓名</span><br><span class="line">----------------------------------------------------</span><br><span class="line">1001			张三		001		王老师</span><br><span class="line">1002			李四		002		赵老师</span><br><span class="line">1003			王五		001		王老师</span><br><span class="line">1001			张三		002		赵老师</span><br><span class="line"></span><br><span class="line">这张表描述了学生和老师的关系：（1个学生可能有多个老师，1个老师有多个学生）</span><br><span class="line">这是非常典型的：多对多关系！</span><br><span class="line"></span><br><span class="line">分析以上的表是否满足第一范式？</span><br><span class="line">  不满足第一范式。</span><br><span class="line"></span><br><span class="line">怎么满足第一范式呢？修改</span><br><span class="line"></span><br><span class="line">学生编号+教师编号(pk)		学生姓名  教师姓名</span><br><span class="line">----------------------------------------------------</span><br><span class="line">1001			001				张三			王老师</span><br><span class="line">1002			002				李四			赵老师</span><br><span class="line">1003			001				王五			王老师</span><br><span class="line">1001			002				张三			赵老师</span><br><span class="line"></span><br><span class="line">学生编号 教师编号，两个字段联合做主键，复合主键（PK: 学生编号+教师编号）</span><br><span class="line">经过修改之后，以上的表满足了第一范式。但是满足第二范式吗？</span><br><span class="line">  不满足，“张三”依赖1001，“王老师”依赖001，显然产生了部分依赖。</span><br><span class="line">  产生部分依赖有什么缺点？</span><br><span class="line">    数据冗余了。空间浪费了。“张三”重复了，“王老师”重复了。</span><br><span class="line"></span><br><span class="line">为了让以上的表满足第二范式，你需要这样设计：</span><br><span class="line">  使用三张表来表示多对多的关系！！！！</span><br><span class="line">  学生表</span><br><span class="line">  学生编号(pk)		学生名字</span><br><span class="line">  ------------------------------------</span><br><span class="line">  1001					张三</span><br><span class="line">  1002					李四</span><br><span class="line">  1003					王五</span><br><span class="line">  </span><br><span class="line">  教师表</span><br><span class="line">  教师编号(pk)		教师姓名</span><br><span class="line">  --------------------------------------</span><br><span class="line">  001					王老师</span><br><span class="line">  002					赵老师</span><br><span class="line"></span><br><span class="line">  学生教师关系表</span><br><span class="line">  id(pk)			学生编号(fk)			教师编号(fk)</span><br><span class="line">  ------------------------------------------------------</span><br><span class="line">  1						1001						001</span><br><span class="line">  2						1002						002</span><br><span class="line">  3						1003						001</span><br><span class="line">  4						1001						002</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">背口诀：</span><br><span class="line">  多对多怎么设计？</span><br><span class="line">    多对多，三张表，关系表两个外键！！！！！！！！！！！！！！！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三范式</span><br><span class="line">第三范式建立在第二范式的基础之上</span><br><span class="line">要求所有非主键字典必须直接依赖主键，不要产生传递依赖。</span><br><span class="line"></span><br><span class="line">学生编号（PK） 学生姓名 班级编号  班级名称</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">  1001				张三		01			一年一班</span><br><span class="line">  1002				李四		02			一年二班</span><br><span class="line">  1003				王五		03			一年三班</span><br><span class="line">  1004				赵六		03			一年三班</span><br><span class="line"></span><br><span class="line">以上表的设计是描述：班级和学生的关系。很显然是1对多关系！</span><br><span class="line">一个教室中有多个学生。</span><br><span class="line"></span><br><span class="line">分析以上表是否满足第一范式？</span><br><span class="line">  满足第一范式，有主键。</span><br><span class="line"></span><br><span class="line">分析以上表是否满足第二范式？</span><br><span class="line">  满足第二范式，因为主键不是复合主键，没有产生部分依赖。主键是单一主键。</span><br><span class="line"></span><br><span class="line">分析以上表是否满足第三范式？</span><br><span class="line">  第三范式要求：不要产生传递依赖！</span><br><span class="line">  一年一班依赖01，01依赖1001，产生了传递依赖。</span><br><span class="line">  不符合第三范式的要求。产生了数据的冗余。</span><br><span class="line"></span><br><span class="line">那么应该怎么设计一对多呢？</span><br><span class="line"></span><br><span class="line">  班级表：一</span><br><span class="line">  班级编号(pk)				班级名称</span><br><span class="line">  ----------------------------------------</span><br><span class="line">  01								一年一班</span><br><span class="line">  02								一年二班</span><br><span class="line">  03								一年三班</span><br><span class="line"></span><br><span class="line">  学生表：多</span><br><span class="line"></span><br><span class="line">  学生编号（PK） 学生姓名 班级编号(fk)</span><br><span class="line">  -------------------------------------------</span><br><span class="line">  1001				张三			01			</span><br><span class="line">  1002				李四			02			</span><br><span class="line">  1003				王五			03			</span><br><span class="line">  1004				赵六			03		</span><br><span class="line">  </span><br><span class="line">  背口诀：</span><br><span class="line">    一对多，两张表，多的表加外键！！！！！！！！！！！！</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="总结表的设计"><a href="#总结表的设计" class="headerlink" title="总结表的设计"></a>总结表的设计</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一对多：</span><br><span class="line">  一对多，两张表，多的表加外键！！！！！！！！！！！！</span><br><span class="line"></span><br><span class="line">多对多：</span><br><span class="line">  多对多，三张表，关系表两个外键！！！！！！！！！！！！！！！</span><br><span class="line"></span><br><span class="line">一对一：</span><br><span class="line">一对一放到一张表中不就行了吗？为啥还要拆分表？</span><br><span class="line">在实际的开发中，可能存在一张表字段太多，太庞大。这个时候要拆分表。</span><br><span class="line">一对一怎么设计？</span><br><span class="line">  没有拆分表之前：一张表</span><br><span class="line">    t_user</span><br><span class="line">    id		login_name		login_pwd		real_name		email				address........</span><br><span class="line">    ---------------------------------------------------------------------------</span><br><span class="line">    1			zhangsan		123				张三				zhangsan@xxx</span><br><span class="line">    2			lisi			123				李四				lisi@xxx</span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">  这种庞大的表建议拆分为两张：</span><br><span class="line">    t_login 登录信息表</span><br><span class="line">    id(pk)		login_name		login_pwd	</span><br><span class="line">    ---------------------------------</span><br><span class="line">    1				zhangsan		123			</span><br><span class="line">    2				lisi			123			</span><br><span class="line"></span><br><span class="line">    t_user 用户详细信息表</span><br><span class="line">    id(pk)		real_name		email				address........	login_id(fk+unique)</span><br><span class="line">    -----------------------------------------------------------------------------------------</span><br><span class="line">    100			张三				zhangsan@xxx								1</span><br><span class="line">    200			李四				lisi@xxx									2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    口诀：一对一，外键唯一！！！！！！！！！！</span><br></pre></td></tr></table></figure>

<h1 id="嘱咐"><a href="#嘱咐" class="headerlink" title="嘱咐"></a>嘱咐</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库设计三范式是理论上的。</span><br><span class="line"></span><br><span class="line">实践和理论有的时候有偏差。</span><br><span class="line"></span><br><span class="line">最终的目的都是为了满足客户的需求，有的时候会拿冗余换执行速度。</span><br><span class="line"></span><br><span class="line">因为在sql当中，表和表之间连接次数越多，效率越低。（笛卡尔积）</span><br><span class="line"></span><br><span class="line">有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的，</span><br><span class="line">并且对于开发人员来说，sql语句的编写难度也会降低。</span><br><span class="line"></span><br><span class="line">面试的时候把这句话说上：他就不会认为你是初级程序员了！</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora+PicGo-Core+gitee建立图床</title>
    <url>/2021/09/03/Typora+PicGo-Core%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>Typora+PicGo-Core+gitee建立图床(强烈建议不要使用github建立,因为就算图像上传成功,typora也会因为网络问题读取不到图片,很麻烦)</p>
<span id="more"></span>

<h1 id="typora设置"><a href="#typora设置" class="headerlink" title="typora设置"></a>typora设置</h1><p>typora点击文件,选择偏好设置,点击图像.</p>
<p>如图所示:</p>
<ol>
<li>选择picgo-core</li>
<li>点击下载更新,按照提示下载即可</li>
<li>点击,然后选择上传图片</li>
<li>勾选如图所示规则</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903103056849.png" alt="image-20210903103056849"></p>
<h1 id="PicGo-Core插件下载和配置文件"><a href="#PicGo-Core插件下载和配置文件" class="headerlink" title="PicGo-Core插件下载和配置文件"></a>PicGo-Core插件下载和配置文件</h1><h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><p>为后续顺利安装插件，先安装好node.js环境；到node.js官网:<a href="https://nodejs.org/en/%E4%B8%8B%E8%BD%BD%E6%88%96%E8%80%85%E7%82%B9%E5%87%BBhttps://nodejs.org/dist/%E8%BF%9B%E5%8E%BB%E5%8F%AF%E9%80%89%E6%8B%A9%E5%90%84%E7%89%88%E6%9C%AC%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%BA%94%E7%9A%84%E4%B8%8B%E8%BD%BD">https://nodejs.org/en/下载或者点击https://nodejs.org/dist/进去可选择各版本进行相应的下载</a></p>
<p>检查PATH环境变量是否配置了Node.js，在cmd窗口输入命令“path”查下是否有node.js路径；</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903103621840.png" alt="image-20210903103621840"></p>
<p>我们可以看到PATH环境变量已经包含node.js,在cmd窗口继续输入命令“node –version”会输出版本信息，为以下安装插件的node.js环境就准备完毕了！</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903103707330.png" alt="image-20210903103707330"></p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>分别安装gitee-uploader，github-plus插件来支持gitee，github图床上传.</p>
<p>首先确认picdo-core安装的位置在那儿,获取路径方式如下.</p>
<ol>
<li>首先依次点击typora,文件,偏好设置,图像,到达如图所示位置</li>
<li>点击验证图片上传选项</li>
<li>下面第二个图红线圈出的位置即为picdo-core安装位置</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903103852867.png" alt="image-20210903103852867"></p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903104101668.png" alt="image-20210903104101668"></p>
<p>然后在picgo安装的路径下运行cmd窗口安装插件（此处就用到了以上node.js环境支持）；</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903104407557.png" alt="image-20210903104407557"></p>
<p>如图所示在上方输入cmd,点击回车即可在此文件夹运行cmd窗口.</p>
<p>依次运行下面的命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.\picgo.exe install gitee-uploader   #gitee的插件</span><br><span class="line"></span><br><span class="line">./picgo install super-prefix  #　上传前文件重命名</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="创建gitee仓库"><a href="#创建gitee仓库" class="headerlink" title="创建gitee仓库"></a>创建gitee仓库</h2><p>仓库是用来存放上传的图片的。</p>
<ol>
<li>填写仓库名称</li>
<li>设置开源</li>
<li>选中模板</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903105641128.png" alt="image-20210903105641128"></p>
<h2 id="获取gitee-token-令牌"><a href="#获取gitee-token-令牌" class="headerlink" title="获取gitee token(令牌)"></a>获取gitee token(令牌)</h2><p>生成自己Gitee的token，用于下面的配置，使得Picgo-core可以操作你的仓库；</p>
<p>申请token:</p>
<ol>
<li>点击gitee里面自己的头像</li>
<li>点击设置</li>
<li>点击私人令牌</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903110011057.png" alt="image-20210903110011057"></p>
<p>点击生成令牌</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903110132505.png" alt="image-20210903110132505"></p>
<ol>
<li>私人令牌描述自己随便写即可</li>
<li>一定要勾选projects,这样picgo才能上传图片到你的gitee刚刚生成的库里面</li>
<li>点击提交</li>
<li>保存生成的token,下面要用到,一定要先复制好,这个token只会出现这一次</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903110231791.png" alt="image-20210903110231791"></p>
<h2 id="配置-picgo-config-json文件"><a href="#配置-picgo-config-json文件" class="headerlink" title="配置~/.picgo/config.json文件"></a>配置~/.picgo/config.json文件</h2><p>如下方式打开配置文件</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904105157434.png" alt="image-20210903105157434"></p>
<p>配置如下信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span>: <span class="string">&quot;gitee&quot;</span>, <span class="comment">// 代表当前的上传图床</span></span><br><span class="line">    <span class="attr">&quot;gitee&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;repo&quot;</span>: <span class="string">&quot;用户名/仓库名称 &quot;</span>,    <span class="comment">//  必填</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;——————————&quot;</span>,    <span class="comment">// gitee 私人令牌,刚刚获取的token 必填</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;img/&quot;</span>, <span class="comment">// 自定义存储路径，比如 img/ </span></span><br><span class="line">      <span class="attr">&quot;customUrl&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 没有自己的域名的话，可以默认为空，不填写</span></span><br><span class="line">      <span class="attr">&quot;branch&quot;</span>: <span class="string">&quot;master&quot;</span> <span class="comment">// 分支名，默认是 master</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;picgo-plugin-gitee-uploader&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;picgo-plugin-super-prefix&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;, <span class="comment">// 为插件预留</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Typora</category>
        <category>PicGo</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>PicGo</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>git笔记</title>
    <url>/2021/09/04/git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Git的四个区域"><a href="#Git的四个区域" class="headerlink" title="Git的四个区域"></a>Git的四个区域</h1><p><strong>工作区</strong>(Workspace)</p>
<p>进行代码开发的的地方,也就是代码所在的文件夹，是你当前看到的，也是<strong>最新的</strong>。</p>
<p>平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作。</p>
<span id="more"></span>

<p><strong>暂存区</strong>(Stage)</p>
<p>.git目录下的index文件, 暂存区会记录<code>git add</code>添加文件的相关信息(文件名、大小、timestamp…)，不保存文件实体, 通过id指向每个文件实体。可以使用<code>git status</code>查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被git管理的。</p>
<p>当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过<code>git add</code>先提交到暂存区，被git管理。</p>
<p><strong>本地仓库(Repository)</strong></p>
<p>保存了对象被提交 过的各个版本，<strong>比起工作区和暂存区的内容，它要更旧一些</strong>。</p>
<p><code>git commit</code>后同步index的目录树到本地仓库，方便从下一步通过<code>git push</code>同步本地仓库与远程仓库的同步。</p>
<p><strong>远程仓库(Remote)</strong></p>
<p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904173327012.png" alt="image-20210904173327012"></p>
<p><strong>总结</strong></p>
<ol>
<li>任何对象都是在工作区中诞生和被修改；</li>
<li>任何修改都是从进入index区才开始被版本控制；</li>
<li><strong>只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹(也就是commit之后)；</strong></li>
<li>与协作者分享本地的修改，可以把它们push到远程仓库来共享。</li>
</ol>
<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904191305153.png" alt="image-20210904191305153"></p>
<h2 id="设置用户签名"><a href="#设置用户签名" class="headerlink" title="设置用户签名"></a>设置用户签名</h2><p>在命令行输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2><p>创建一个空文件,右键执行git bash here</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904191808364.png" alt="image-20210904191808364"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904192019305.png" alt="image-20210904192019305"></p>
<h2 id="切换到旧版本"><a href="#切换到旧版本" class="headerlink" title="切换到旧版本"></a>切换到旧版本</h2><ul>
<li><p>git checkout ：把整个git仓库文件回退到 commit 参数指定的版本</p>
</li>
<li><p>git checkout [] [–] ：回退 filepath 文件为 commit 参数指定的版本</p>
</li>
<li><p>git reset ：把git的HEAD指针指向到 commit 对应的版本，本地文件内容不会被回退</p>
</li>
<li><p>git reset –hard ：把git的HEAD指针指向到 commit 对应的版本，本地文件内容也会被回退</p>
</li>
</ul>
<h1 id="git-dif"><a href="#git-dif" class="headerlink" title="git dif"></a>git dif</h1><p>work tree (工作区) </p>
<p>index(缓冲区)</p>
<p>repository(本地仓库)</p>
<ol>
<li>git diff：是查看working tree与index的差别的。</li>
<li>git diff –cached：是查看index与repository的差别的。</li>
<li>git diff HEAD：是查看working tree和repository的差别的。其中：HEAD代表的是最近的一次commit的信息。</li>
</ol>
<p>如图所示，有区别则将两次对比的结果显示在输出中。对比没差别，就不显示。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904201909286.png" alt="image-20210904201909286"></p>
<h1 id="git-log-和git-reflog区别"><a href="#git-log-和git-reflog区别" class="headerlink" title="git log 和git reflog区别"></a>git log 和git reflog区别</h1><p>区别:</p>
<ul>
<li><p>git log可以显示所有提交过的版本信息，<strong>不包括已经被删除的 commit 记录和 reset 的操作</strong>。</p>
</li>
<li><p>git reflog是显示所有的操作记录，包括提交，回退的操作。一般用来找出操作记录中的版本号，进行回退.</p>
</li>
</ul>
<p><strong>例子</strong></p>
<p>如图所示,当前已经执行了三次提交,并且Head指针指在了第三次提交处.</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904193632666.png" alt="image-20210904193632666"></p>
<p>如果此时执行如下指令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard 38a6bd891e86644b3772388a122eebb97329b22e</span><br><span class="line">git log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到 log里面没有显示之前的third commit操作的信息了.而此时如果想退回third 的那个版本,我们该怎么获取版本号嘞,此时就可以使用git reflog命令.</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904194023699.png"></p>
<p>执行如下命令,则会显示所有的操作记录，包括提交，回退，合并，删除分支等等的操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<p>可以看到其中显示了third commit 的版本号。通过使用此版本号，我们可以执行命令跳回第三个版本。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904194652751.png" alt="image-20210904194652751"></p>
<p>同时其中还记录了我们刚刚的reset操作。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210904194859950.png" alt="image-20210904194859950"></p>
<p>另外可<a href="https://blog.csdn.net/chenpuzhen/article/details/92084229">参考git log和git reflog的区别</a>.</p>
<p>#撤销修改</p>
<ol>
<li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li>
<li>当你不但改乱了工作区某个文件的内容，<strong>还添加到了暂存区时</strong>，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</li>
<li><strong>已经提交了不合适的修改到版本库(即本地库)时</strong>，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节，不过前提是没有推送到远程库。</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1vy4y1s7k6?spm_id_from=pageDriver">尚硅谷 git视频</a>,  <a href="https://blog.csdn.net/zhongshun0928/article/details/119159273">视频配套他人笔记1</a><a href="https://blog.csdn.net/unique_perfect/article/details/104833391">视频配套他人笔记2</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>private的访问权限是本类，而不是本对象</title>
    <url>/2021/09/22/private%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%98%AF%E6%9C%AC%E7%B1%BB%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E6%9C%AC%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>如下面代码所示, object向下转型为student类,在Student类中equals方法中就可以访问私有属性name和age,也即<strong>证明了private的访问权限是本类，而不是本对象.</strong></p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>typora使用技巧</title>
    <url>/2021/09/03/typora%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>#Typora中文输入状态下英文符号输出</p>
<p>Typora可以使用ctrl + . 在中文输入状态下英文符号输出，ctrl + . 即可改回中文输入状态输出中文符号。</p>
<span id="more"></span>

<p>sdfasdf</p>
]]></content>
      <categories>
        <category>typora</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行语法格式中常用符号的含义</title>
    <url>/2021/09/04/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<p>在描述命令行参数的时候，对其格式有些约定俗成的写法，各系统之间也有差别。一般采用的格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令&lt;必选参数1|必选参数2&gt; [-option &#123;必选参数1|必选参数2|必选参数3&#125;] [可选参数…]&#123;(默认参数)|参数|参数&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>命令格式中常用的几个符号含义如下</strong>：</p>
<p>　　尖括号&lt; &gt;：必选参数，实际使用时应将其替换为所需要的参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">　　命令语法：git help &lt;name&gt;</span><br><span class="line">　　</span><br><span class="line">　　实际使用：git help config 或 git help branch 或 ... (name被替换为实际的内容)</span><br></pre></td></tr></table></figure>

<p>　　大括号{ }：必选参数，内部使用，包含此处允许使用的参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">　　命令语法：git stash &#123;apply | pop&#125;</span><br><span class="line"></span><br><span class="line">　　实际使用：git stash apply 或 git stash pop (只能在必选参数apply或pop中选一个)</span><br></pre></td></tr></table></figure>

<p>　　方括号[ ]：可选参数，可写可不写</p>
<p>　　小括号( )：指明参数的默认值，只用于{ }中</p>
<p>　　竖线|：用于分隔多个互斥参数，含义为“或”，使用时只能选择其中的一个</p>
<p>　　省略号…：任意多个参数</p>
<p><strong>说明：</strong></p>
<p>大括号和尖括号的区别为：大括号中只能选择所列举的必选参数（或之一），尖括号中却需要根据实际替换必选参数</p>
<p>参考<a href="https://www.cnblogs.com/uakora/p/11809501.html">命令行符号的意义</a></p>
]]></content>
      <categories>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建自己的个人博客</title>
    <url>/2021/09/01/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>用hexo和github搭建自己的个人博客</p>
<span id="more"></span>



<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><ol>
<li>git</li>
<li>node.js</li>
<li>hexo</li>
</ol>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>直接在点击下面链接下载安装。然后按照步骤安装即可。</p>
<p><a href="https://git-scm.com/">https://git-scm.com/</a></p>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>同样点击下面链接下载安装。然后按照步骤安装即可。</p>
<p><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>通过下面命令进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>执行以下命令确认hexo已安装好，该命令会显示hexo的版本及依赖的包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>如果安装好则会显示以下信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: win32 10.0.18362</span><br><span class="line">node: 16.8.0</span><br><span class="line">v8: 9.2.230.21-node.20</span><br><span class="line">uv: 1.42.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.2</span><br><span class="line">modules: 93</span><br><span class="line">nghttp2: 1.42.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 6.0.2</span><br><span class="line">openssl: 1.1.1k+quic</span><br><span class="line">cldr: 39.0</span><br><span class="line">icu: 69.1</span><br><span class="line">tz: 2021a</span><br><span class="line">unicode: 13.0</span><br><span class="line">ngtcp2: 0.1.0-DEV</span><br><span class="line">nghttp3: 0.1.0-DEV</span><br></pre></td></tr></table></figure>

<h1 id="hexo创建博客"><a href="#hexo创建博客" class="headerlink" title="hexo创建博客"></a>hexo创建博客</h1><p>创建一个空白文件夹blog，作为博客根目录，在该根目录下，运行cmd窗口.</p>
<p>注意文件夹必须为空</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903145523286.png" alt="image-20210903145523286"></p>
<p>然后执行如下命令初始化，执行以下命令初始化博客。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>分别执行下面命令，启动服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl #清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo g  #生成静态网站文件</span><br><span class="line">hexo s  #启动服务器。默认情况下，访问网址为： http://localhost:4000/</span><br></pre></td></tr></table></figure>

<p>默认是4000端口，在浏览器输入<a href="http://localhost:4000就可以访问默认博客了">http://localhost:4000就可以访问默认博客了</a></p>
<p>到此默认的hexo博客就建立好了,但是大家一般会使用其他主题来使得博客更加好看,下面介绍next主题.</p>
<p>更多hexo命令解释请看<a href="https://hexo.io/zh-cn/docs/commands.html#server">https://hexo.io/zh-cn/docs/commands.html#server</a></p>
<h1 id="next主题"><a href="#next主题" class="headerlink" title="next主题"></a>next主题</h1><p>使用如下git指令下载NexT最新的主题文件(注意要在博客目录下运行cmd窗口执行如下命令)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>现在Hexo中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于next主题目录下，主要用于配置主题相关的选项。将前者称为站点配置文件， 后者称为主题配置文件。</p>
<h2 id="站点文件配置"><a href="#站点文件配置" class="headerlink" title="站点文件配置"></a>站点文件配置</h2><p>找到站点的_config.yml文件,修改其中如下的值。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903154538650.png" alt="image-20210903154538650"></p>
<table>
<thead>
<tr>
<th><code>title</code></th>
<th>网站标题</th>
</tr>
</thead>
<tbody><tr>
<td><code>subtitle</code></td>
<td>网站副标题</td>
</tr>
<tr>
<td><code>description</code></td>
<td>网站描述</td>
</tr>
<tr>
<td><code>keywords</code></td>
<td>网站的关键词。支持多个关键词。</td>
</tr>
<tr>
<td><code>author</code></td>
<td>您的名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<h2 id="站点文件配置-1"><a href="#站点文件配置-1" class="headerlink" title="站点文件配置"></a>站点文件配置</h2><h3 id="菜单项"><a href="#菜单项" class="headerlink" title="菜单项"></a>菜单项</h3><p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 </p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903154935622.png" alt="image-20210903154935622"></p>
<h3 id="初始化对应的Menu文件夹"><a href="#初始化对应的Menu文件夹" class="headerlink" title="初始化对应的Menu文件夹"></a>初始化对应的Menu文件夹</h3><p>配置完菜单之后,还要在终端中输入（前提在<strong>Hexo</strong>文件路径下）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>否则会出现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot GET/xxx 错误</span><br></pre></td></tr></table></figure>

<p>同时还要在<code>blog/source/categories</code>中<strong>index.md</strong>文件，添加<code>type: categories</code>，</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903155908305.png" alt="image-20210903155908305"></p>
<p>其他菜单项目也同理创建。</p>
<h3 id="next四种主题"><a href="#next四种主题" class="headerlink" title="next四种主题"></a>next四种主题</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>

<p>选择其中一个就行,我选择的是Mist</p>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>avatar</code>， 值设置成头像的链接地址，图片可以传到next/source/uploads目录下。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">avatar: /uploads/avatar.jpg</span><br></pre></td></tr></table></figure>



<h3 id="字数统计-阅读时长"><a href="#字数统计-阅读时长" class="headerlink" title="字数统计+阅读时长"></a>字数统计+阅读时长</h3><ol>
<li>安装hexo-wordcount</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>

<ol>
<li>配置主题文件</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: <span class="literal">true</span></span><br><span class="line">  wordcount: <span class="literal">true</span></span><br><span class="line">  min2read: <span class="literal">true</span></span><br><span class="line">  totalcount: <span class="literal">true</span></span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h3><p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。在xxx.md的文章中使用</p>
<p>使用下面标签即可，在标签之前的会在主页显示，标签之后的则在点击阅读更多之后显示。</p>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903160122768.png" alt="image-20210903160122768"></p>
<h1 id="修改文章目录导航"><a href="#修改文章目录导航" class="headerlink" title="修改文章目录导航"></a>修改文章目录导航</h1><h2 id="取消数字编号"><a href="#取消数字编号" class="headerlink" title="取消数字编号"></a>取消数字编号</h2><p>在主题配置文件中关闭目录中的数字编号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\_config.ymltoc:</span><br><span class="line">  number: false  # 关闭目录中的数字编号</span><br></pre></td></tr></table></figure>

<h2 id="展开全部目录层级"><a href="#展开全部目录层级" class="headerlink" title="展开全部目录层级"></a>展开全部目录层级</h2><p>默认情况下文章的多级目录是折叠的，点击才会触发下级菜单的展开，并且并且同时只能展开一个目录分支，这会造成在点击不同目录标题的时候目录跳来跳去。如果你想实现默认展开全部目录的功能，可以在自定义样式文件中添加以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\source\css\_custom\custom.styl//TOC目录默认全部展开</span><br><span class="line">.post-toc .nav .nav-child &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="默认展开两级目录"><a href="#默认展开两级目录" class="headerlink" title="默认展开两级目录"></a>默认展开两级目录</h2><p>通常文章内会出现多级标题，对应的目录里就会有多级导航出现，这时候一些原本你不希望出现的次要标题也会在目录中出现并且无法折叠。可以通过以下样式实现默认只展开两级目录，这样以来就通过一个折中的方案完美解决了目录折叠的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\source\css\_custom\custom.styl//TOC目录默认展开两级</span><br><span class="line">.post-toc .nav .nav-level-1&gt;.nav-child &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="只显示两级目录"><a href="#只显示两级目录" class="headerlink" title="只显示两级目录"></a>只显示两级目录</h2><p>如果你根本不想让三级及以上的标题出现 TOC 导航目录中，可以考虑在自定义样式文件中添加以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\source\css\_custom\custom.styl//TOC目录默认只显示两级目录</span><br><span class="line">.nav-level-2 &gt; .nav-child &#123;</span><br><span class="line">  display: none !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主动隐藏文章目录"><a href="#主动隐藏文章目录" class="headerlink" title="主动隐藏文章目录"></a>主动隐藏文章目录</h2><p>如果你写了一篇并不算长的文章，没有层层嵌套的多级目录结构，此时侧边的文章目录空荡荡的就有点鸡肋了。修改侧边栏布局模板中的相关逻辑代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\layout\_macro\sidebar.swig- &#123;% set display_toc = is_post and theme.toc.enable %&#125;</span><br><span class="line">+ &#123;% set display_toc = is_post and theme.toc.enable and not page.hide_toc %&#125;</span><br></pre></td></tr></table></figure>

<p>然后就可在 Front-Matter 中设定变量 hide_toc 用于控制是否隐藏侧边目录</p>
<h1 id="Mist外观下，修改侧边栏在左边"><a href="#Mist外观下，修改侧边栏在左边" class="headerlink" title="Mist外观下，修改侧边栏在左边"></a>Mist外观下，修改侧边栏在左边</h1><p>参考：</p>
<ul>
<li><p><a href="https://blog.fish-404.icu/Blog-adjust-sidebar-nextmist-left/">Blog-调整NexT主题Mist外观侧边栏在左</a></p>
</li>
<li><p><a href="http://mashirosorata.vicp.io/HEXO-NEXT%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE.html">HEXO+NEXT主题个性化配置|SORA</a></p>
</li>
</ul>
<p>在NexT主题的Mist外观下，侧边栏默认在右，而只有在<code>Pisces</code>，<code>Gemini</code>这两种外观下才可以通过<code>_config.yml</code>直接修改选择左侧或是右侧。</p>
<p>在此过程中需要修改如下几个文件：</p>
<ul>
<li>sidebar.styl</li>
<li>sidebar-toggle.styl</li>
<li>back-to-top.styl</li>
<li>motion.js</li>
</ul>
<p> <strong>1.sidebar.styl</strong></p>
<p>路径：<code>.\themes\next\source\css\_common\components\sidebar\</code><br>将此文件的第3行<code>right</code>改为<code>left</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>2.sidebar-toggle.styl</strong></p>
<p>路径：<code>.\themes\next\source\css\_common\components\sidebar\</code><br>同样将第3行冒号前的<code>right</code>改为<code>left</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">left</span>: $b2t-position-right;</span><br></pre></td></tr></table></figure>

<p><strong>3.back-to-top.styl</strong></p>
<p>路径：<code>.\themes\next\source\css\_common\components\</code><br>将第5行冒号前的<code>right</code>改为<code>left</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">left</span>: $b2t-position-right;</span><br></pre></td></tr></table></figure>

<p><strong>4.motion.js</strong></p>
<p>路径：<code>.\themes\next\source\js\src\motion.js</code><br>利用搜索功能找到改文档中的<code>paddingRight</code>字段，将<code>paddingRight</code>改为<code>paddingLeft</code>(共两处)。</p>
<p>重新部署即可完成侧边栏在左的设置。</p>
<p><strong>修改窗口缩小bug</strong></p>
<p>仅使用上面的方案情况下，如果侧边栏的设置是展开状态，在浏览器窗口缩小时会导致侧边栏仍然存在且占据相当大的位置。做以下调整。</p>
<p>找到<code>./themes/source/js/src/motion.js</code>文件，在<code>$(document).ready(function ()&#123;&#125;)</code>内添加内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    <span class="keyword">var</span> bwol=<span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">	    <span class="keyword">if</span>(bwol &lt; <span class="number">975</span>)&#123;</span><br><span class="line">		$(<span class="string">&#x27;aside#sidebar&#x27;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">		$(<span class="string">&#x27;body&#x27;</span>).css(<span class="string">&quot;paddingLeft&quot;</span>,<span class="string">&quot;0px&quot;</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    <span class="keyword">var</span> bwos=<span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">	    bwos &lt; <span class="number">975</span> &amp;&amp; $(<span class="string">&#x27;body&#x27;</span>).velocity(<span class="string">&#x27;stop&#x27;</span>).velocity(&#123;<span class="attr">paddingLeft</span>: <span class="number">0</span>&#125;,<span class="number">0</span>);</span><br><span class="line">	    <span class="keyword">if</span>($(<span class="string">&#x27;aside#sidebar&#x27;</span>).css(<span class="string">&#x27;display&#x27;</span>) != <span class="string">&#x27;none&#x27;</span> &amp;&amp; $(<span class="string">&#x27;aside#sidebar&#x27;</span>).css(<span class="string">&#x27;width&#x27;</span>)!=<span class="string">&#x27;0px&#x27;</span>)</span><br><span class="line">		$(<span class="string">&#x27;body&#x27;</span>).velocity(<span class="string">&#x27;stop&#x27;</span>).velocity(&#123;<span class="attr">paddingLeft</span>: <span class="number">350</span>&#125;,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	   NexT.motion = &#123;&#125;;</span><br><span class="line">	   </span><br><span class="line">	   ...</span><br></pre></td></tr></table></figure>

<h1 id="Hexo博客显示图片办法"><a href="#Hexo博客显示图片办法" class="headerlink" title="Hexo博客显示图片办法"></a>Hexo博客显示图片办法</h1><h2 id="方法一-使用typora-Picgo-gitee"><a href="#方法一-使用typora-Picgo-gitee" class="headerlink" title="方法一 使用typora+Picgo+gitee"></a>方法一 使用typora+Picgo+gitee</h2><a href="/2021/09/03/Typora+PicGo-Core%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%8A/" title="使用typora+Picgo+gitee 建立图床,显示hexo博客中图片">使用typora+Picgo+gitee 建立图床,显示hexo博客中图片</a>

<h2 id="方法二-建立同名文件夹"><a href="#方法二-建立同名文件夹" class="headerlink" title="方法二   建立同名文件夹"></a>方法二   建立同名文件夹</h2><ol>
<li><p>修改博客配置。</p>
<p>修改博客根目录中<code>_config.yml</code>文件的配置项<code>post_asset_folder</code>为<code>true</code>：</p>
<p>2.通过<code>hexo new xxx</code>新建博客后，会产生一个和文件同名的文件夹。(或者自己建立一个xxx.md文件和xxx文件夹)</p>
</li>
</ol>
<p><img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20210903145943342.png" alt="image-20210903145943342"></p>
<p>在博客根目录中下使用npm安装插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>当文章需要添加图片时，将需要添加的图片放入同名的文件夹中，使用相对位置索引到该图片,如下所示.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![示例](./xxxx/a.png)</span><br></pre></td></tr></table></figure>

<h1 id="站内文章引用"><a href="#站内文章引用" class="headerlink" title="站内文章引用"></a>站内文章引用</h1><p>在写文章的过程中，有时候需要引用站内的其他文章。可以通过内置的标签插件的语法<code>post_link</code>来实现引用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br></pre></td></tr></table></figure>

<p> 引用 xxx.md</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link xxx %&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link xxx 要显示的内容 %&#125;</span><br></pre></td></tr></table></figure>

<p>要显示的内容不写,默认显示标题</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="next5中文目录点击无法跳转问题"><a href="#next5中文目录点击无法跳转问题" class="headerlink" title="next5中文目录点击无法跳转问题"></a>next5中文目录点击无法跳转问题</h2><p><strong>解决方案</strong></p>
<p>这个错误很明显，因为控制台已经告诉我错误代码在 <code>post-details.js</code>里了，顺着提示找到 <code>themes\next\source\js\src\post-details.js</code>，找到第 73 行为目录绑定点击事件的方法，会看到：</p>
<p>[<img src="https://gitee.com/zlpxiaokeai/img/raw/master/img/image-20201217170155109.png" alt="image-20201217170155109"></p>
<p>添加如下代码即可:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对获取到的url进行重编码</span></span><br><span class="line">targetSelector = <span class="built_in">decodeURI</span>(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;href&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>然后 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 重新跑一下，发现目录就正常了。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>文本文件与二进制文件的区别</title>
    <url>/2021/09/04/%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="文本文件与二进制文件的定义"><a href="#文本文件与二进制文件的定义" class="headerlink" title="文本文件与二进制文件的定义"></a>文本文件与二进制文件的定义</h1><p>计算机的存储在物理上是二进制的，所以<strong>文本文件与二进制文件的区别并不是物理上的，而是逻辑上的</strong>。这两者只是在编码层次上有差异。简单来说，</p>
<ul>
<li>文本文件是基于字符编码的文件，常见的编码有ASCII编码，UNICODE编码等等。</li>
<li>二进制文件是基于值编码的文件，你可以根据具体应用，指定某个值是什么意思（这样一个过程，可以看作是自定义编码与解码的过程）。</li>
</ul>
<span id="more"></span>

<h1 id="文本文件与二进制文件的区别"><a href="#文本文件与二进制文件的区别" class="headerlink" title="文本文件与二进制文件的区别"></a>文本文件与二进制文件的区别</h1><p>文本文件：</p>
<ol>
<li>基本上是定长编码的(也有非定长的编码如UTF-8)。</li>
</ol>
<p>二进制文件：</p>
<ol>
<li>二进制文件可看成是变长编码的，因为是值编码嘛，多少个比特代表一个值，完全由决定。</li>
</ol>
<p>文本文件的存储与其读取基本上是个逆过程。而二进制文件的存取显然与文本文件的存取差不多，只是编／解码方式不同而已</p>
<p>参考:<a href="https://blog.csdn.net/colourful_sky/article/details/80334250">文本文件和二进制文件的差异和区别</a></p>
]]></content>
      <categories>
        <category>文件</category>
      </categories>
      <tags>
        <tag>文本文件</tag>
        <tag>二进制文件</tag>
      </tags>
  </entry>
</search>
